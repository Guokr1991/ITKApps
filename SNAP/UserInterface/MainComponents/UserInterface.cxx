// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "UserInterface.h"

inline void UserInterface::cb_Greyscale_i(Fl_Menu_*, void*) {
  this->OnMenuLoadGrey();
}
void UserInterface::cb_Greyscale(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Greyscale_i(o,v);
}

inline void UserInterface::cb_Segmentation_i(Fl_Menu_*, void*) {
  this->OnMenuLoadSegmentation();
}
void UserInterface::cb_Segmentation(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Segmentation_i(o,v);
}

inline void UserInterface::cb_Label_i(Fl_Menu_*, void*) {
  this->OnMenuLoadLabels();
}
void UserInterface::cb_Label(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Label_i(o,v);
}

inline void UserInterface::cb_m_MenuLoadPreprocessed_i(Fl_Menu_*, void*) {
  this->OnMenuLoadGrey();
}
void UserInterface::cb_m_MenuLoadPreprocessed(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_m_MenuLoadPreprocessed_i(o,v);
}

inline void UserInterface::cb_Segmentation1_i(Fl_Menu_*, void*) {
  this->OnMenuSaveSegmentation();
}
void UserInterface::cb_Segmentation1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Segmentation1_i(o,v);
}

inline void UserInterface::cb_Label1_i(Fl_Menu_*, void*) {
  this->OnMenuSaveLabels();
}
void UserInterface::cb_Label1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Label1_i(o,v);
}

inline void UserInterface::cb_m_MenuSavePreprocessed_i(Fl_Menu_*, void*) {
  this->OnMenuSavePreprocessed();
}
void UserInterface::cb_m_MenuSavePreprocessed(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_m_MenuSavePreprocessed_i(o,v);
}

inline void UserInterface::cb_Print_i(Fl_Menu_*, void*) {
  this->PrintVoxelCountsCallback();
}
void UserInterface::cb_Print(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Print_i(o,v);
}

inline void UserInterface::cb_Quit_i(Fl_Menu_*, void*) {
  shutdown();
}
void UserInterface::cb_Quit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Quit_i(o,v);
}

inline void UserInterface::cb_Intensity_i(Fl_Menu_*, void*) {
  this->OnMenuIntensityCurve();
}
void UserInterface::cb_Intensity(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Intensity_i(o,v);
}

inline void UserInterface::cb_Rendering_i(Fl_Menu_*, void*) {
  m_WinRenderOptions->show();
}
void UserInterface::cb_Rendering(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Rendering_i(o,v);
}

inline void UserInterface::cb_About_i(Fl_Menu_*, void*) {
  m_WinAbout->show();
}
void UserInterface::cb_About(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item UserInterface::menu_m_MenubarMain[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Load", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Greyscale Image", 0x4006c,  (Fl_Callback*)UserInterface::cb_Greyscale, 0, 0, 0, 0, 14, 56},
 {"&Segmentation Data", 0x4006f,  (Fl_Callback*)UserInterface::cb_Segmentation, 0, 0, 0, 0, 14, 56},
 {"&Label Descriptions", 0,  (Fl_Callback*)UserInterface::cb_Label, 0, 0, 0, 0, 14, 56},
 {"&Preprocessed Image", 0x4006c,  (Fl_Callback*)UserInterface::cb_m_MenuLoadPreprocessed, 0, 1, 0, 0, 14, 56},
 {0},
 {"&Save", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Segmentation Data", 0x40073,  (Fl_Callback*)UserInterface::cb_Segmentation1, 0, 0, 0, 0, 14, 56},
 {"&Label Descriptions", 0,  (Fl_Callback*)UserInterface::cb_Label1, 0, 0, 0, 0, 14, 56},
 {"&Preprocessed Image", 0x40073,  (Fl_Callback*)UserInterface::cb_m_MenuSavePreprocessed, 0, 1, 0, 0, 14, 56},
 {"Print &Voxel Counts", 0,  (Fl_Callback*)UserInterface::cb_Print, 0, 0, 0, 0, 14, 56},
 {0},
 {"&Quit", 0x40071,  (Fl_Callback*)UserInterface::cb_Quit, 0, 0, 0, 0, 14, 56},
 {0},
 {"&Options", 0,  0, 0, 64, 0, 0, 14, 56},
 {"Intensity &Curve", 0,  (Fl_Callback*)UserInterface::cb_Intensity, 0, 0, 0, 0, 14, 56},
 {"&Rendering", 0,  (Fl_Callback*)UserInterface::cb_Rendering, 0, 0, 0, 0, 14, 56},
 {"&About", 0,  (Fl_Callback*)UserInterface::cb_About, 0, 0, 0, 0, 14, 56},
 {0},
 {0}
};
Fl_Menu_Item* UserInterface::m_MenuLoadPreprocessed = UserInterface::menu_m_MenubarMain + 5;
Fl_Menu_Item* UserInterface::m_MenuSavePreprocessed = UserInterface::menu_m_MenubarMain + 10;

inline void UserInterface::cb_m_BtnCrosshairsMode_i(Fl_Button*, void*) {
  SetToolbarMode(CROSSHAIRS_MODE);
}
void UserInterface::cb_m_BtnCrosshairsMode(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnCrosshairsMode_i(o,v);
}

#include <FL/Fl_Pixmap.H>
static const char *idata_cursor3D[] = {
"41 41 2 1",
"  c Black",
". c None",
".........................................",
".........................................",
".........................................",
".........................................",
".................... ....................",
".................... ....................",
".................... ....................",
".........................................",
".........................................",
".........................................",
".................... ....................",
".................... ....................",
".................... ....................",
".........................................",
".........................................",
".........................................",
".................... ....................",
".................... ....................",
".................... ....................",
".........................................",
"....   ...   ...   ...   ...   ...   ....",
".........................................",
".................... ....................",
".................... ....................",
".................... ....................",
".........................................",
".........................................",
".........................................",
".................... ....................",
".................... ....................",
".................... ....................",
".........................................",
".........................................",
".........................................",
".................... ....................",
".................... ....................",
".................... ....................",
".........................................",
".........................................",
".........................................",
"........................................."
};
static Fl_Pixmap image_cursor3D(idata_cursor3D);

inline void UserInterface::cb_m_BtnNavigationMode_i(Fl_Button*, void*) {
  SetToolbarMode(NAVIGATION_MODE);
}
void UserInterface::cb_m_BtnNavigationMode(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnNavigationMode_i(o,v);
}

static const char *idata_navigation[] = {
"41 41 2 1",
"  c Black",
". c None",
".........................................",
".........................................",
".........................................",
".........................................",
".........................................",
".....                               .....",
".....                               .....",
".....  ...........................  .....",
".....  ...........................  .....",
".....  ...........................  .....",
".....  ............. .............  .....",
".....  ............   ............  .....",
".....  ...........     ...........  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ..... ....... ....... .....  .....",
".....  ....  ....... .......  ....  .....",
".....  ...                     ...  .....",
".....  ....  ....... .......  ....  .....",
".....  ..... ....... ....... .....  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ............. .............  .....",
".....  ...........     ...........  .....",
".....  ............   ............  .....",
".....  ............. .............  .....",
".....  ...........................  .....",
".....  ...........................  .....",
".....  ...........................  .....",
".....                               .....",
".....                               .....",
".........................................",
".........................................",
".........................................",
".........................................",
"........................................."
};
static Fl_Pixmap image_navigation(idata_navigation);

inline void UserInterface::cb__i(Fl_Button*, void*) {
  SetToolbarMode(POLYGON_DRAWING_MODE);
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

static const char *idata_polygon_draw[] = {
"41 41 2 1",
"  c Black",
". c None",
".........................................",
".........................................",
".........................................",
".........................................",
".........................................",
"................... .....................",
".................. . ....................",
"................. ... ...................",
"................ ..... ..................",
"............... ....... .................",
".............. ......... ................",
"............. ........... ...............",
"............ ............. ..............",
"........... ............... .............",
".......... ................. ............",
"......... ................... ...........",
"........ ..................... ..........",
"....... ..................... ...........",
"...... ..................... ............",
"..... ..................... .............",
"...... ................... ..............",
"....... ................. ...............",
"........ ............... ................",
"......... ............. .................",
".......... ............. ................",
"........... ............. ...............",
"............ ............. ..............",
"............. ............. .............",
".............. ............. ............",
"............... ............. ...........",
"................               ..........",
".........................................",
".........................................",
".........................................",
".........................................",
".........................................",
".........................................",
".........................................",
".........................................",
".........................................",
"........................................."
};
static Fl_Pixmap image_polygon_draw(idata_polygon_draw);

inline void UserInterface::cb_1_i(Fl_Button*, void*) {
  SetToolbarMode(PAINT3D_MODE);
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

static const char *idata_paint3D[] = {
"41 41 3 1",
"  c Black",
". c #0000d9",
"X c None",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXX.X.XX.XXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXX.X.X...   XXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXX.X.X.X  XX  XXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXX X.XX XX  ..XXXXXXXXXXXXXXXXX",
"XXXXXXXXXXX.X.XXX X  ... XXXXXXXXXXXXXXXX",
"XXXXXXXXXXXX.X.XX   . ... XXXXXXXXXXXXXXX",
"XXXXXXXXXXX.X.XXXX   . ... XXXXXXXXXXXXXX",
"XXXXXXXXXXXX.XXXXXX   . .. XXXXXXXXXXXXXX",
"XXXXXXXXXXX.X.XXXXXX   .  XXXXXXXXXXXXXXX",
"XXXXXXXXXXXX.XXXXXXXX    XXXXXXXXXXXXXXXX",
"XXXXXXXXXXX.XXXXXXXXXX  XXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXX        XX     XXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXX XX XXXX XXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXX XXX XXXXX XXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXX XXXX XXXXX XXXXXXXXXXXXX",
"XXXXXXXXXXXXXXX XXXXX XXXXXX XXXXXXXXXXXX",
"XXXXXXXXXXXXXXXX  XXX XXXXXX XXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXX XX XXXXX XXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXX XX XXXXX XXXXXXXXXXXXX",
"XXXXXXXXXXX  XXXX XXX XXXX XXXXXXXXXXXXXX",
"XXXXXXXXXXXXX    XXXX     XXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
};
static Fl_Pixmap image_paint3D(idata_paint3D);

inline void UserInterface::cb_SnAP_i(Fl_Button*, void*) {
  SetToolbarMode(ROI_MODE);
}
void UserInterface::cb_SnAP(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_SnAP_i(o,v);
}

inline void UserInterface::cb_edit_i(Fl_Button*, void*) {
  m_WinEditLabel->show();
this->UpdateEditLabelWindow();
}
void UserInterface::cb_edit(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit_i(o,v);
}

inline void UserInterface::cb_m_InDrawingColor_i(Fl_Choice* o, void*) {
  m_GlobalState->SetDrawingColorLabel(
  (uchar) m_ColorMap[o->value()] );
this->UpdateColorChips();
this->UpdateEditLabelWindow();
}
void UserInterface::cb_m_InDrawingColor(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InDrawingColor_i(o,v);
}

inline void UserInterface::cb_m_InUseGaussianSmoothing_i(Fl_Check_Button*, void*) {
  this->OnRenderOptionsChange();
}
void UserInterface::cb_m_InUseGaussianSmoothing(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InUseGaussianSmoothing_i(o,v);
}

inline void UserInterface::cb_m_InUseMeshSmoothing_i(Fl_Check_Button*, void*) {
  this->OnRenderOptionsChange();
}
void UserInterface::cb_m_InUseMeshSmoothing(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InUseMeshSmoothing_i(o,v);
}

inline void UserInterface::cb_m_InUseDecimate_i(Fl_Check_Button*, void*) {
  this->OnRenderOptionsChange();
}
void UserInterface::cb_m_InUseDecimate(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InUseDecimate_i(o,v);
}

inline void UserInterface::cb_m_InIRISLabelOpacity_i(Fl_Value_Slider*, void*) {
  this->OnIRISLabelOpacityChange();
}
void UserInterface::cb_m_InIRISLabelOpacity(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InIRISLabelOpacity_i(o,v);
}

inline void UserInterface::cb_m_InDrawOverColor_i(Fl_Choice* o, void*) {
  m_GlobalState->SetOverWriteColorLabel(
  (uchar) m_ColorMap[o->value()]);
this->UpdateColorChips();
}
void UserInterface::cb_m_InDrawOverColor(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InDrawOverColor_i(o,v);
}

inline void UserInterface::cb_Visible_i(Fl_Round_Button*, void*) {
  m_InDrawOverColor->deactivate();
m_GlobalState->SetCoverageMode(PAINT_OVER_COLORS);
}
void UserInterface::cb_Visible(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Visible_i(o,v);
}

inline void UserInterface::cb_All_i(Fl_Round_Button*, void*) {
  m_InDrawOverColor->deactivate();
m_GlobalState->SetCoverageMode(PAINT_OVER_ALL);
}
void UserInterface::cb_All(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_All_i(o,v);
}

inline void UserInterface::cb_Label2_i(Fl_Round_Button*, void*) {
  m_InDrawOverColor->activate();
m_GlobalState->SetCoverageMode(PAINT_OVER_ONE);
}
void UserInterface::cb_Label2(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Label2_i(o,v);
}

inline void UserInterface::cb_Invert_i(Fl_Check_Button* o, void*) {
  m_GlobalState->SetPolygonInvert(o->value() != 0);
}
void UserInterface::cb_Invert(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Invert_i(o,v);
}

inline void UserInterface::cb_m_BtnStartSnake_i(Fl_Button*, void*) {
  OnSnakeStartAction();
}
void UserInterface::cb_m_BtnStartSnake(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnStartSnake_i(o,v);
}

inline void UserInterface::cb_m_BtnResetROI_i(Fl_Button*, void*) {
  OnResetROIAction();
}
void UserInterface::cb_m_BtnResetROI(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnResetROI_i(o,v);
}

inline void UserInterface::cb_Launch_i(Fl_Button*, void*) {
  this->OnLaunchTutorialAction();
}
void UserInterface::cb_Launch(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Launch_i(o,v);
}

inline void UserInterface::cb_m_BtnSNAPCrosshairs_i(Fl_Button*, void*) {
  SetToolbarMode(CROSSHAIRS_MODE);
}
void UserInterface::cb_m_BtnSNAPCrosshairs(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSNAPCrosshairs_i(o,v);
}

inline void UserInterface::cb_m_BtnSNAPNavigation_i(Fl_Button*, void*) {
  SetToolbarMode(NAVIGATION_MODE);
}
void UserInterface::cb_m_BtnSNAPNavigation(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSNAPNavigation_i(o,v);
}

inline void UserInterface::cb_m_BtnSNAPStepPreprocess_i(Fl_Button*, void*) {
  this->OnSNAPStepPreprocess();
}
void UserInterface::cb_m_BtnSNAPStepPreprocess(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSNAPStepPreprocess_i(o,v);
}

inline void UserInterface::cb_m_BtnSNAPStepInitialize_i(Fl_Button*, void*) {
  this->OnSNAPStepInitialize();
}
void UserInterface::cb_m_BtnSNAPStepInitialize(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSNAPStepInitialize_i(o,v);
}

inline void UserInterface::cb_m_BtnSNAPStepSegment_i(Fl_Button*, void*) {
  this->OnSNAPStepSegment();
}
void UserInterface::cb_m_BtnSNAPStepSegment(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSNAPStepSegment_i(o,v);
}

inline void UserInterface::cb_m_BtnPreprocess_i(Fl_Button*, void*) {
  OnPreprocessAction();
}
void UserInterface::cb_m_BtnPreprocess(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnPreprocess_i(o,v);
}

inline void UserInterface::cb_m_RadSnakeInOut_i(Fl_Round_Button*, void*) {
  OnInOutSnakeSelect();
}
void UserInterface::cb_m_RadSnakeInOut(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_RadSnakeInOut_i(o,v);
}

inline void UserInterface::cb_m_RadSnakeEdge_i(Fl_Round_Button*, void*) {
  OnEdgeSnakeSelect();
}
void UserInterface::cb_m_RadSnakeEdge(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_RadSnakeEdge_i(o,v);
}

inline void UserInterface::cb_m_BtnAddBubble_i(Fl_Button*, void*) {
  OnAddBubbleAction();
}
void UserInterface::cb_m_BtnAddBubble(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnAddBubble_i(o,v);
}

inline void UserInterface::cb_m_BtnRemoveBubble_i(Fl_Button*, void*) {
  OnRemoveBubbleAction();
}
void UserInterface::cb_m_BtnRemoveBubble(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnRemoveBubble_i(o,v);
}

inline void UserInterface::cb_m_InBubbleRadius_i(Fl_Value_Slider*, void*) {
  OnBubbleRadiusChange();
}
void UserInterface::cb_m_InBubbleRadius(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InBubbleRadius_i(o,v);
}

inline void UserInterface::cb_m_BrsActiveBubbles_i(Fl_Browser*, void*) {
  OnActiveBubblesChange();
}
void UserInterface::cb_m_BrsActiveBubbles(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BrsActiveBubbles_i(o,v);
}

inline void UserInterface::cb_m_BtnAcceptInitialization_i(Fl_Button*, void*) {
  OnAcceptInitializationAction();
}
void UserInterface::cb_m_BtnAcceptInitialization(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnAcceptInitialization_i(o,v);
}

inline void UserInterface::cb_m_BtnRestartInitialization_i(Fl_Button*, void*) {
  OnRestartInitializationAction();
}
void UserInterface::cb_m_BtnRestartInitialization(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnRestartInitialization_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParameters_i(Fl_Button*, void*) {
  OnSnakeParametersAction();
}
void UserInterface::cb_m_BtnSnakeParameters(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeParameters_i(o,v);
}

inline void UserInterface::cb_m_InStepSize_i(Fl_Choice*, void*) {
  OnSnakeStepSizeChange();
}
void UserInterface::cb_m_InStepSize(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InStepSize_i(o,v);
}

inline void UserInterface::cb_m_BtnAcceptSegmentation_i(Fl_Button*, void*) {
  OnAcceptSegmentationAction();
}
void UserInterface::cb_m_BtnAcceptSegmentation(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnAcceptSegmentation_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeRewind_i(Fl_Button*, void*) {
  OnSnakeRewindAction();
}
void UserInterface::cb_m_BtnSnakeRewind(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeRewind_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakePlay_i(Fl_Button*, void*) {
  OnSnakePlayAction();
}
void UserInterface::cb_m_BtnSnakePlay(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakePlay_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeStop_i(Fl_Button*, void*) {
  OnSnakeStopAction();
}
void UserInterface::cb_m_BtnSnakeStop(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeStop_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeStep_i(Fl_Button*, void*) {
  OnSnakeStepAction();
}
void UserInterface::cb_m_BtnSnakeStep(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeStep_i(o,v);
}

inline void UserInterface::cb_m_RadioSNAPViewOriginal_i(Fl_Round_Button*, void*) {
  OnSNAPViewOriginalSelect();
}
void UserInterface::cb_m_RadioSNAPViewOriginal(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_RadioSNAPViewOriginal_i(o,v);
}

inline void UserInterface::cb_m_RadioSNAPViewPreprocessed_i(Fl_Round_Button*, void*) {
  OnViewPreprocessedSelect();
}
void UserInterface::cb_m_RadioSNAPViewPreprocessed(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_RadioSNAPViewPreprocessed_i(o,v);
}

inline void UserInterface::cb_m_InSNAPLabelOpacity_i(Fl_Value_Slider*, void*) {
  this->OnSNAPLabelOpacityChange();
}
void UserInterface::cb_m_InSNAPLabelOpacity(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_m_InSNAPLabelOpacity_i(o,v);
}

inline void UserInterface::cb_m_BtnCancelSegmentation_i(Fl_Button*, void*) {
  OnCancelSegmentationAction();
}
void UserInterface::cb_m_BtnCancelSegmentation(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnCancelSegmentation_i(o,v);
}

inline void UserInterface::cb_m_InIRISSliceSlider_i(Fl_Scrollbar*, void*) {
  this->PositionSliderCallback(0);
}
void UserInterface::cb_m_InIRISSliceSlider(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_InIRISSliceSlider_i(o,v);
}

inline void UserInterface::cb_Accept_button_i(Fl_Button*, void*) {
  AcceptPolygonCallback(0);
}
void UserInterface::cb_Accept_button(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Accept_button_i(o,v);
}

inline void UserInterface::cb_m_BtnPaste_i(Fl_Button*, void*) {
  Win2D[0]->PastePolygon();
}
void UserInterface::cb_m_BtnPaste(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnPaste_i(o,v);
}

inline void UserInterface::cb_reset_i(Fl_Button*, void*) {
  Win2D[0]->ResetView();
Win2D[0]->redraw();
}
void UserInterface::cb_reset(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset_i(o,v);
}

inline void UserInterface::cb_m_InIRISSliceSlider1_i(Fl_Scrollbar*, void*) {
  this->PositionSliderCallback(1);
}
void UserInterface::cb_m_InIRISSliceSlider1(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_InIRISSliceSlider1_i(o,v);
}

inline void UserInterface::cb_Accept_button1_i(Fl_Button*, void*) {
  AcceptPolygonCallback(1);
}
void UserInterface::cb_Accept_button1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Accept_button1_i(o,v);
}

inline void UserInterface::cb_m_BtnPaste1_i(Fl_Button*, void*) {
  Win2D[1]->PastePolygon();
}
void UserInterface::cb_m_BtnPaste1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnPaste1_i(o,v);
}

inline void UserInterface::cb_reset1_i(Fl_Button*, void*) {
  Win2D[1]->ResetView();
Win2D[1]->redraw();
}
void UserInterface::cb_reset1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset1_i(o,v);
}

inline void UserInterface::cb_m_InIRISSliceSlider2_i(Fl_Scrollbar*, void*) {
  this->PositionSliderCallback(2);
}
void UserInterface::cb_m_InIRISSliceSlider2(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_InIRISSliceSlider2_i(o,v);
}

inline void UserInterface::cb_Accept_button2_i(Fl_Button*, void*) {
  AcceptPolygonCallback(2);
}
void UserInterface::cb_Accept_button2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Accept_button2_i(o,v);
}

inline void UserInterface::cb_m_BtnPaste2_i(Fl_Button*, void*) {
  Win2D[2]->PastePolygon();
}
void UserInterface::cb_m_BtnPaste2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnPaste2_i(o,v);
}

inline void UserInterface::cb_reset2_i(Fl_Button*, void*) {
  Win2D[2]->ResetView();
Win2D[2]->redraw();
}
void UserInterface::cb_reset2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset2_i(o,v);
}

inline void UserInterface::cb_m_BtnMeshUpdate_i(Fl_Button*, void*) {
  m_IRISWindow3D->UpdateMesh();
}
void UserInterface::cb_m_BtnMeshUpdate(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnMeshUpdate_i(o,v);
}

inline void UserInterface::cb_m_BtnAccept3D_i(Fl_Button* o, void*) {
  o->deactivate();
m_IRISWindow3D->Accept();
MakeSegTexturesCurrent();
m_BtnMeshUpdate->activate();
}
void UserInterface::cb_m_BtnAccept3D(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnAccept3D_i(o,v);
}

inline void UserInterface::cb_reset3_i(Fl_Button*, void*) {
  m_IRISWindow3D->ResetView();
m_IRISWindow3D->redraw();
}
void UserInterface::cb_reset3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset3_i(o,v);
}

inline void UserInterface::cb_m_InSNAPSliceSlider_i(Fl_Scrollbar*, void*) {
  this->OnIRISSliceSliderChange(0);
}
void UserInterface::cb_m_InSNAPSliceSlider(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_InSNAPSliceSlider_i(o,v);
}

inline void UserInterface::cb_reset4_i(Fl_Button*, void*) {
  m_SNAPWindow2D[0]->ResetView();
m_SNAPWindow2D[0]->redraw();
}
void UserInterface::cb_reset4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset4_i(o,v);
}

inline void UserInterface::cb_m_InSNAPSliceSlider1_i(Fl_Scrollbar*, void*) {
  this->OnIRISSliceSliderChange(1);
}
void UserInterface::cb_m_InSNAPSliceSlider1(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_InSNAPSliceSlider1_i(o,v);
}

inline void UserInterface::cb_reset5_i(Fl_Button*, void*) {
  m_SNAPWindow2D[1]->ResetView();
m_SNAPWindow2D[1]->redraw();
}
void UserInterface::cb_reset5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset5_i(o,v);
}

inline void UserInterface::cb_m_InSNAPSliceSlider2_i(Fl_Scrollbar*, void*) {
  this->OnIRISSliceSliderChange(2);
}
void UserInterface::cb_m_InSNAPSliceSlider2(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_InSNAPSliceSlider2_i(o,v);
}

inline void UserInterface::cb_reset6_i(Fl_Button*, void*) {
  m_SNAPWindow2D[2]->ResetView();
m_SNAPWindow2D[2]->redraw();
}
void UserInterface::cb_reset6(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset6_i(o,v);
}

inline void UserInterface::cb_m_BtnSNAPMeshUpdate_i(Fl_Button*, void*) {
  m_SNAPWindow3D->UpdateMesh();
}
void UserInterface::cb_m_BtnSNAPMeshUpdate(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_BtnSNAPMeshUpdate_i(o,v);
}

inline void UserInterface::cb_reset7_i(Fl_Button*, void*) {
  m_SNAPWindow3D->ResetView();
m_SNAPWindow3D->redraw();
}
void UserInterface::cb_reset7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_reset7_i(o,v);
}

inline void UserInterface::cb_m_ChkContinuousView3DUpdate_i(Fl_Check_Button*, void*) {
  OnContinuousViewUpdateChange();
}
void UserInterface::cb_m_ChkContinuousView3DUpdate(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_m_ChkContinuousView3DUpdate_i(o,v);
}

inline void UserInterface::cb_select_i(Fl_Button*, void*) {
  char *m_ChosedFile;
m_ChosedFile = fl_file_chooser("Select a File",NULL,NULL);
m_InLoadLabelFilename->value((const char*)m_ChosedFile);
}
void UserInterface::cb_select(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_select_i(o,v);
}

inline void UserInterface::cb_Okay_i(Fl_Button*, void*) {
  this->LoadLabelsCallback();
}
void UserInterface::cb_Okay(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Okay_i(o,v);
}

inline void UserInterface::cb_Cancel_i(Fl_Button*, void*) {
  m_WinLoadLabel->hide();
}
void UserInterface::cb_Cancel(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

inline void UserInterface::cb_select1_i(Fl_Button*, void*) {
  char *m_ChosedFile;
m_ChosedFile = fl_file_chooser("Select a File",NULL,NULL);
m_InSaveLabelFilename->value((const char*)m_ChosedFile);
}
void UserInterface::cb_select1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_select1_i(o,v);
}

inline void UserInterface::cb_Okay1_i(Fl_Button*, void*) {
  this->SaveLabelsCallback();
}
void UserInterface::cb_Okay1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Okay1_i(o,v);
}

inline void UserInterface::cb_Cancel1_i(Fl_Button*, void*) {
  m_WinSaveLabel->hide();
}
void UserInterface::cb_Cancel1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

inline void UserInterface::cb_Okay2_i(Fl_Button*, void*) {
  m_WinEditLabel->hide();
this->ChangeLabelsCallback();
}
void UserInterface::cb_Okay2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Okay2_i(o,v);
}

inline void UserInterface::cb_Apply_i(Fl_Button*, void*) {
  this->ChangeLabelsCallback();
}
void UserInterface::cb_Apply(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Apply_i(o,v);
}

inline void UserInterface::cb_Close_i(Fl_Button*, void*) {
  m_WinEditLabel->hide();
}
void UserInterface::cb_Close(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

inline void UserInterface::cb_on_i(Fl_Check_Button* o, void*) {
  m_GlobalState->SetInterpolateSegmentation(o->value() != 0);
MakeSegTexturesCurrent();
}
void UserInterface::cb_on(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_on_i(o,v);
}

inline void UserInterface::cb_on1_i(Fl_Check_Button* o, void*) {
  m_GlobalState->SetInterpolateGrey(o->value() != 0);
// for (int i=0; i<3; i++) Win2D[i]->CreateGreySliceTexture();
RedrawWindows();
}
void UserInterface::cb_on1(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_on1_i(o,v);
}

inline void UserInterface::cb_Okay3_i(Fl_Button*, void*) {
  this->OnRenderOptionsChange();
}
void UserInterface::cb_Okay3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Okay3_i(o,v);
}

inline void UserInterface::cb_Cancel2_i(Fl_Button*, void*) {
  this->OnRenderOptionsCancel();
}
void UserInterface::cb_Cancel2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel2_i(o,v);
}

inline void UserInterface::cb_close_i(Fl_Button*, void*) {
  m_WinAbout->hide();
}
void UserInterface::cb_close(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_close_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParametersOk_i(Fl_Return_Button*, void*) {
  OnSnakeParametersApplyAction();
m_WinSnakeParameters->hide();
}
void UserInterface::cb_m_BtnSnakeParametersOk(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_m_BtnSnakeParametersOk_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParametersClose_i(Fl_Button*, void*) {
  m_WinSnakeParameters->hide();
}
void UserInterface::cb_m_BtnSnakeParametersClose(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_m_BtnSnakeParametersClose_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParametersUserDefined_i(Fl_Round_Button*, void*) {
  OnSnakeParametersUserDefinedSelect();
}
void UserInterface::cb_m_BtnSnakeParametersUserDefined(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeParametersUserDefined_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParametersSchlegel_i(Fl_Round_Button*, void*) {
  OnSnakeParametersSchlegelSelect();
}
void UserInterface::cb_m_BtnSnakeParametersSchlegel(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeParametersSchlegel_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParametersTurello_i(Fl_Round_Button*, void*) {
  OnSnakeParametersTurelloSelect();
}
void UserInterface::cb_m_BtnSnakeParametersTurello(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeParametersTurello_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParametersSapiro_i(Fl_Round_Button*, void*) {
  OnSnakeParametersSapiroSelect();
}
void UserInterface::cb_m_BtnSnakeParametersSapiro(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_m_BtnSnakeParametersSapiro_i(o,v);
}

inline void UserInterface::cb_m_InSnakeParametersParamsClamp_i(Fl_Check_Button*, void*) {
  OnSnakeParametersClampChange();
}
void UserInterface::cb_m_InSnakeParametersParamsClamp(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_m_InSnakeParametersParamsClamp_i(o,v);
}

inline void UserInterface::cb_m_BtnSnakeParametersApply_i(Fl_Button*, void*) {
  OnSnakeParametersApplyAction();
}
void UserInterface::cb_m_BtnSnakeParametersApply(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_m_BtnSnakeParametersApply_i(o,v);
}
#if 1 // Local variable declarations
#endif

UserInterface::UserInterface() {
  Fl_Window* w;
  { Fl_Window* o = m_WinMain = new Fl_Window(875, 710, "SnAP: IRIS");
    w = o;
    o->user_data((void*)(this));
    o->align(FL_ALIGN_CENTER);
    { Fl_Group* o = Controls = new Fl_Group(0, 0, 290, 710);
      o->color(245);
      { Fl_Menu_Bar* o = m_MenubarMain = new Fl_Menu_Bar(0, 0, 145, 25);
        o->box(FL_PLASTIC_UP_BOX);
        o->menu(menu_m_MenubarMain);
      }
      { Fl_Wizard* o = m_WizControlPane = new Fl_Wizard(0, 25, 145, 685, "Control Pane");
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        { Fl_Group* o = m_GrpToolbarPage = new Fl_Group(0, 25, 145, 685);
          o->box(FL_FLAT_BOX);
          o->color(53);
          o->labelsize(12);
          o->hide();
          { Fl_Group* o = m_GrpInteractionModes = new Fl_Group(5, 45, 135, 95, "Active Tool Selection");
            o->box(FL_PLASTIC_UP_BOX);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Button* o = m_BtnCrosshairsMode = new Fl_Button(15, 55, 35, 35);
              o->tooltip("Crosshairs: left clicking moves the cursor");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->value(1);
              o->shortcut(0x63);
              o->color(179);
              o->selection_color(94);
              o->image(image_cursor3D);
              o->callback((Fl_Callback*)cb_m_BtnCrosshairsMode);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = m_BtnNavigationMode = new Fl_Button(95, 55, 35, 35);
              o->tooltip("Navigation: zoom, pan, and rotate");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->shortcut(0x6e);
              o->color(180);
              o->selection_color(94);
              o->image(image_navigation);
              o->callback((Fl_Callback*)cb_m_BtnNavigationMode);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = new Fl_Button(55, 55, 35, 35);
              o->tooltip("Polygon drawing");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->shortcut(0x70);
              o->color(180);
              o->selection_color(94);
              o->image(image_polygon_draw);
              o->callback((Fl_Callback*)cb_);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = new Fl_Button(55, 95, 35, 35);
              o->tooltip("3D paint: spray paint and cut planes");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->color(180);
              o->selection_color(94);
              o->image(image_paint3D);
              o->callback((Fl_Callback*)cb_1);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = new Fl_Button(15, 95, 35, 35, "SnAP mode");
              o->tooltip("3D paint: spray paint and cut planes");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->color(180);
              o->selection_color(94);
              o->labelsize(10);
              o->callback((Fl_Callback*)cb_SnAP);
              o->align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = new Fl_Button(95, 95, 35, 35);
              o->tooltip("3D paint: spray paint and cut planes");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->color(46);
              o->selection_color(46);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(5, 375, 135, 60, "Color Label");
            o->box(FL_PLASTIC_UP_BOX);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Button* o = new Fl_Button(70, 410, 65, 20, "edit labels");
              o->box(FL_PLASTIC_UP_BOX);
              o->color(179);
              o->labelsize(11);
              o->callback((Fl_Callback*)cb_edit);
            }
            { Fl_Choice* o = m_InDrawingColor = new Fl_Choice(47, 382, 88, 23, "Color Label");
              o->down_box(FL_BORDER_BOX);
              o->labeltype(FL_NO_LABEL);
              o->labelsize(10);
              o->labelcolor(4);
              o->textsize(10);
              o->callback((Fl_Callback*)cb_m_InDrawingColor);
              o->align(FL_ALIGN_TOP);
            }
            { Fl_Group* o = m_GrpCurrentColor = new Fl_Group(15, 383, 28, 22);
              o->box(FL_BORDER_BOX);
              o->color(23);
              o->selection_color(57);
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(5, 459, 135, 121, "Rendering Options");
            o->box(FL_PLASTIC_UP_BOX);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Check_Button* o = m_InUseGaussianSmoothing = new Fl_Check_Button(15, 473, 115, 20, "Gaussian Smooth");
              o->down_box(FL_DOWN_BOX);
              o->color(0);
              o->selection_color(4);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_m_InUseGaussianSmoothing);
            }
            { Fl_Check_Button* o = m_InUseMeshSmoothing = new Fl_Check_Button(15, 513, 115, 20, "Mesh Smooth");
              o->down_box(FL_DOWN_BOX);
              o->selection_color(4);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_m_InUseMeshSmoothing);
            }
            { Fl_Check_Button* o = m_InUseDecimate = new Fl_Check_Button(15, 493, 115, 20, "Triangle Decimate");
              o->down_box(FL_DOWN_BOX);
              o->selection_color(4);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_m_InUseDecimate);
            }
            { Fl_Value_Slider* o = m_InIRISLabelOpacity = new Fl_Value_Slider(15, 555, 115, 15, "Label opacity");
              o->type(1);
              o->labelsize(11);
              o->maximum(255);
              o->step(1);
              o->value(128);
              o->callback((Fl_Callback*)cb_m_InIRISLabelOpacity);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            o->end();
          }
          { Fl_Wizard* o = m_TabsToolOptions = new Fl_Wizard(5, 165, 135, 185, "Active Tool Settings");
            o->box(FL_PLASTIC_UP_BOX);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Group* o = m_GrpToolOptionCrosshairs = new Fl_Group(5, 165, 135, 185, "1");
              o->labelsize(10);
              { Fl_Output* o = m_OutGreyProbe = new Fl_Output(60, 190, 65, 20, "Intensity:");
                o->tooltip("Intensity value at cursor position");
                o->box(FL_THIN_DOWN_BOX);
                o->color(49);
                o->selection_color(48);
                o->labelsize(10);
                o->textsize(12);
              }
              { Fl_Output* o = m_OutLabelProbe = new Fl_Output(60, 210, 65, 20, "Label:");
                o->tooltip("Label at current position");
                o->box(FL_THIN_DOWN_BOX);
                o->color(49);
                o->selection_color(48);
                o->labelsize(10);
                o->textsize(12);
              }
              o->end();
            }
            { Fl_Group* o = m_GrpToolOptionZoomPan = new Fl_Group(5, 165, 135, 185, "2");
              o->labelsize(10);
              o->hide();
              o->end();
            }
            { Fl_Group* o = m_GrpToolOptionPolygon = new Fl_Group(5, 165, 135, 185, "3");
              o->labelsize(10);
              o->labelcolor(4);
              o->hide();
              { Fl_Group* o = m_GrpDrawOverColor = new Fl_Group(15, 225, 115, 100, "Paint over:");
                o->box(FL_ENGRAVED_BOX);
                o->labelfont(1);
                o->labelsize(12);
                o->labelcolor(0);
                o->align(FL_ALIGN_TOP_LEFT);
                { Fl_Choice* o = m_InDrawOverColor = new Fl_Choice(40, 295, 80, 20, "Painted Over");
                o->down_box(FL_BORDER_BOX);
                o->labeltype(FL_NO_LABEL);
                o->labelsize(10);
                o->labelcolor(4);
                o->textsize(10);
                o->callback((Fl_Callback*)cb_m_InDrawOverColor);
                o->align(FL_ALIGN_TOP);
                }
                { Fl_Round_Button* o = new Fl_Round_Button(25, 250, 105, 20, "Visible");
                o->type(102);
                o->down_box(FL_DOWN_BOX);
                o->selection_color(4);
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_Visible);
                }
                { Fl_Round_Button* o = new Fl_Round_Button(25, 230, 105, 20, "All (default)");
                o->type(102);
                o->down_box(FL_DOWN_BOX);
                o->value(1);
                o->selection_color(4);
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_All);
                }
                { Fl_Round_Button* o = new Fl_Round_Button(25, 270, 55, 20, "Label:");
                o->type(102);
                o->down_box(FL_DOWN_BOX);
                o->selection_color(4);
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_Label2);
                o->when(FL_WHEN_CHANGED);
                }
                { Fl_Group* o = m_OutDrawOverColor = new Fl_Group(95, 272, 25, 18);
                o->box(FL_BORDER_BOX);
                o->color(23);
                o->end();
                }
                o->end();
              }
              { Fl_Check_Button* o = new Fl_Check_Button(10, 175, 100, 15, " Invert Polygon");
                o->tooltip("If on, \"accept poly\" paints outside the polygon instead of inside");
                o->down_box(FL_PLASTIC_UP_BOX);
                o->labelfont(1);
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_Invert);
              }
              o->end();
            }
            { Fl_Group* o = m_GrpToolOptionPaintCan = new Fl_Group(5, 165, 135, 180, "4");
              o->labelsize(10);
              o->hide();
              o->end();
            }
            { Fl_Group* o = m_GrpToolOptionSnAP = new Fl_Group(5, 165, 135, 185, "5");
              o->labelsize(10);
              o->hide();
              { Fl_Button* o = m_BtnStartSnake = new Fl_Button(20, 305, 100, 25, "Segment 3D");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(181);
                o->labelfont(1);
                o->labelsize(11);
                o->callback((Fl_Callback*)cb_m_BtnStartSnake);
              }
              { Fl_Button* o = m_BtnResetROI = new Fl_Button(20, 275, 100, 25, "Reset ROI");
                o->tooltip("Set region of interest to entire volume");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(181);
                o->labelsize(11);
                o->callback((Fl_Callback*)cb_m_BtnResetROI);
              }
              o->end();
            }
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = m_GrpWelcomePage = new Fl_Group(0, 25, 145, 685);
          o->box(FL_FLAT_BOX);
          o->color(53);
          o->hide();
          { Fl_Group* o = new Fl_Group(5, 195, 135, 35, "ITK+SnAP");
            o->labelfont(3);
            o->labelsize(24);
            o->align(FL_ALIGN_CENTER);
            o->end();
          }
          { Fl_Group* o = new Fl_Group(5, 225, 135, 20, "Version 0.2 - (Pre-Alpha)");
            o->labelsize(12);
            o->align(129|FL_ALIGN_INSIDE);
            o->end();
          }
          { Fl_Group* o = new Fl_Group(10, 525, 125, 165, "Getting Started:");
            o->box(FL_PLASTIC_UP_BOX);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            o->align(129);
            { Fl_Group* o = new Fl_Group(15, 535, 115, 110, "Choose File->Load->Grey Data from the menu above to get started!");
              o->labelsize(11);
              o->align(133|FL_ALIGN_INSIDE);
              o->end();
            }
            { Fl_Button* o = new Fl_Button(25, 655, 95, 25, "Launch Tutorial");
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->color(180);
              o->selection_color(134);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_Launch);
            }
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = m_GrpSNAPPage = new Fl_Group(0, 25, 145, 685);
          o->box(FL_FLAT_BOX);
          o->color(53);
          { Fl_Group* o = new Fl_Group(5, 45, 135, 120, "Image Interaction");
            o->box(FL_PLASTIC_DOWN_BOX);
            o->color(41);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Button* o = m_BtnSNAPCrosshairs = new Fl_Button(15, 55, 35, 35);
              o->tooltip("Crosshairs: left clicking moves the cursor");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->value(1);
              o->shortcut(0x63);
              o->color(179);
              o->selection_color(94);
              o->image(image_cursor3D);
              o->callback((Fl_Callback*)cb_m_BtnSNAPCrosshairs);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = m_BtnSNAPNavigation = new Fl_Button(55, 55, 35, 35);
              o->tooltip("Navigation: zoom, pan, and rotate");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->shortcut(0x6e);
              o->color(180);
              o->selection_color(94);
              o->image(image_navigation);
              o->callback((Fl_Callback*)cb_m_BtnSNAPNavigation);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Button* o = new Fl_Button(95, 55, 35, 35);
              o->tooltip("3D paint: spray paint and cut planes");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->down_box(FL_PLASTIC_DOWN_BOX);
              o->color(46);
              o->selection_color(46);
              o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
            }
            { Fl_Output* o = m_OutSNAPProbe = new Fl_Output(90, 115, 45, 20, "Intensity:");
              o->tooltip("Intensity value at cursor position");
              o->box(FL_THIN_DOWN_BOX);
              o->color(49);
              o->selection_color(48);
              o->labelsize(10);
              o->textsize(12);
            }
            { Fl_Output* o = m_OutSNAPLabelProbe = new Fl_Output(90, 135, 45, 20, "Label:");
              o->tooltip("Label at cursor position");
              o->box(FL_THIN_DOWN_BOX);
              o->color(49);
              o->selection_color(48);
              o->labelsize(10);
              o->textsize(12);
            }
            { Fl_Group* o = m_GrpSNAPCurrentColor = new Fl_Group(15, 133, 28, 22);
              o->tooltip("Color of current label");
              o->box(FL_BORDER_BOX);
              o->color(23);
              o->selection_color(57);
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(5, 189, 135, 111, "Segmentation Pipeline");
            o->box(FL_PLASTIC_DOWN_BOX);
            o->color(41);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Button* o = m_BtnSNAPStepPreprocess = new Fl_Button(15, 195, 30, 30, "1");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->value(1);
              o->color(180);
              o->selection_color(94);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_m_BtnSNAPStepPreprocess);
            }
            { Fl_Button* o = m_BtnSNAPStepInitialize = new Fl_Button(15, 230, 30, 30, "2");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->color(180);
              o->selection_color(94);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_m_BtnSNAPStepInitialize);
            }
            { Fl_Button* o = m_BtnSNAPStepSegment = new Fl_Button(15, 265, 30, 30, "3");
              o->type(102);
              o->box(FL_PLASTIC_UP_BOX);
              o->color(180);
              o->selection_color(94);
              o->labelfont(1);
              o->callback((Fl_Callback*)cb_m_BtnSNAPStepSegment);
            }
            { Fl_Group* o = new Fl_Group(50, 195, 85, 30, "Preprocess image");
              o->labelsize(11);
              o->align(133|FL_ALIGN_INSIDE);
              o->end();
            }
            { Fl_Group* o = new Fl_Group(50, 230, 85, 30, "Initialize segmentation");
              o->labelsize(11);
              o->align(133|FL_ALIGN_INSIDE);
              o->end();
            }
            { Fl_Group* o = new Fl_Group(50, 265, 85, 30, "Perform segmentation");
              o->labelsize(11);
              o->align(133|FL_ALIGN_INSIDE);
              o->end();
            }
            o->end();
          }
          { Fl_Wizard* o = m_WizSegmentationPipeline = new Fl_Wizard(5, 325, 135, 210, "Pipeline Step Options");
            o->box(FL_NO_BOX);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Group* o = m_GrpSNAPStepPreprocess = new Fl_Group(5, 325, 135, 210, "Preprocess Image");
              o->box(FL_PLASTIC_DOWN_BOX);
              o->color(41);
              o->labeltype(FL_EMBOSSED_LABEL);
              o->labelsize(12);
              o->labelcolor(4);
              { Fl_Button* o = m_BtnPreprocess = new Fl_Button(25, 500, 95, 25, "Preprocess...");
                o->tooltip("Preprocess original data");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(180);
                o->labelsize(12);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnPreprocess);
              }
              { Fl_Group* o = m_GrpSnakeChoiceRadio = new Fl_Group(15, 350, 115, 45, "Segmentation mode");
                o->labelsize(12);
                o->align(FL_ALIGN_TOP_LEFT);
                { Fl_Round_Button* o = m_RadSnakeInOut = new Fl_Round_Button(25, 355, 105, 20, "In/Out snake");
                o->tooltip("Select in/out snake");
                o->down_box(FL_ROUND_DOWN_BOX);
                o->value(1);
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_m_RadSnakeInOut);
                }
                { Fl_Round_Button* o = m_RadSnakeEdge = new Fl_Round_Button(25, 375, 105, 20, "Edge snake");
                o->tooltip("Select edge-driven snake");
                o->down_box(FL_ROUND_DOWN_BOX);
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_m_RadSnakeEdge);
                }
                o->end();
              }
              o->end();
            }
            { Fl_Group* o = m_GrpSNAPStepInitialize = new Fl_Group(5, 325, 135, 210, "Initialize Segmentation");
              o->box(FL_PLASTIC_DOWN_BOX);
              o->color(41);
              o->labeltype(FL_EMBOSSED_LABEL);
              o->labelsize(12);
              o->labelcolor(4);
              o->hide();
              { Fl_Button* o = m_BtnAddBubble = new Fl_Button(15, 335, 55, 35, "Add\nBubble");
                o->tooltip("Add bubble at cursor position");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(180);
                o->labelsize(12);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnAddBubble);
              }
              { Fl_Button* o = m_BtnRemoveBubble = new Fl_Button(75, 335, 55, 35, "Remove\nBubble");
                o->tooltip("Remove highlighted bubble from list");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(180);
                o->labelsize(12);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnRemoveBubble);
              }
              { Fl_Value_Slider* o = m_InBubbleRadius = new Fl_Value_Slider(15, 395, 115, 20, "Radius");
                o->type(1);
                o->labelsize(12);
                o->maximum(255);
                o->step(1);
                o->value(128);
                o->callback((Fl_Callback*)cb_m_InBubbleRadius);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Browser* o = m_BrsActiveBubbles = new Fl_Browser(15, 435, 115, 50, "Active bubbles");
                o->tooltip("Click a bubble to modify radius or remove");
                o->type(2);
                o->labelsize(12);
                o->textsize(9);
                o->callback((Fl_Callback*)cb_m_BrsActiveBubbles);
                o->align(FL_ALIGN_TOP_LEFT);
              }
              { Fl_Button* o = m_BtnAcceptInitialization = new Fl_Button(15, 500, 115, 25, "Accept Initialization");
                o->tooltip("Accept initialization, begin running snake");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(180);
                o->labelsize(12);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnAcceptInitialization);
              }
              { Fl_Button* o = m_BtnRestartInitialization = new Fl_Button(15, 500, 115, 25, "Restart Initialization");
                o->tooltip("Accept initialization, begin running snake");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(180);
                o->labelsize(12);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnRestartInitialization);
                o->hide();
              }
              o->end();
            }
            { Fl_Group* o = m_GrpSNAPStepSegment = new Fl_Group(5, 325, 135, 210, "Perform Segmentation");
              o->box(FL_PLASTIC_DOWN_BOX);
              o->color(41);
              o->labeltype(FL_EMBOSSED_LABEL);
              o->labelsize(12);
              o->labelcolor(4);
              o->hide();
              { Fl_Output* o = m_OutCurrentIteration = new Fl_Output(75, 455, 60, 20, "Iteration:");
                o->tooltip("Current snake iteration");
                o->box(FL_THIN_DOWN_BOX);
                o->color(23);
                o->selection_color(48);
                o->labelsize(12);
                o->textsize(10);
              }
              { Fl_Button* o = m_BtnSnakeParameters = new Fl_Button(15, 335, 115, 25, "Set Parameters...");
                o->tooltip("Change snake parameters");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(180);
                o->labelsize(12);
                o->callback((Fl_Callback*)cb_m_BtnSnakeParameters);
              }
              { Fl_Choice* o = m_InStepSize = new Fl_Choice(75, 430, 60, 20, "Step size:");
                o->tooltip("Number of iterations per step");
                o->down_box(FL_BORDER_BOX);
                o->color(23);
                o->selection_color(7);
                o->labelsize(12);
                o->textsize(10);
                o->callback((Fl_Callback*)cb_m_InStepSize);
              }
              { Fl_Button* o = m_BtnAcceptSegmentation = new Fl_Button(10, 500, 125, 25, "Accept Results");
                o->tooltip("Accept segmentation and return");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(140);
                o->labelsize(12);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnAcceptSegmentation);
              }
              { Fl_Group* o = m_GrpSnakeControl = new Fl_Group(15, 395, 120, 35, "Snake controls:");
                o->labelsize(12);
                o->align(FL_ALIGN_TOP_LEFT);
                { Fl_Button* o = m_BtnSnakeRewind = new Fl_Button(15, 397, 28, 25, "@<<");
                o->tooltip("Rewind snake to beginning");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(140);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnSnakeRewind);
                }
                { Fl_Button* o = m_BtnSnakePlay = new Fl_Button(45, 397, 28, 25, "@>");
                o->tooltip("Step snake continuously");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(140);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnSnakePlay);
                }
                { Fl_Button* o = m_BtnSnakeStop = new Fl_Button(75, 397, 28, 25, "@square");
                o->tooltip("Stop snake");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(140);
                o->labelsize(8);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnSnakeStop);
                }
                { Fl_Button* o = m_BtnSnakeStep = new Fl_Button(105, 397, 28, 25, "@|>");
                o->tooltip("Step snake one step size");
                o->box(FL_PLASTIC_UP_BOX);
                o->color(140);
                o->labelcolor(0);
                o->callback((Fl_Callback*)cb_m_BtnSnakeStep);
                }
                o->end();
              }
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(5, 560, 135, 95, "Display Options");
            o->box(FL_PLASTIC_DOWN_BOX);
            o->color(41);
            o->labeltype(FL_EMBOSSED_LABEL);
            o->labelsize(12);
            o->labelcolor(4);
            { Fl_Group* o = m_GrpImageOptions = new Fl_Group(15, 585, 115, 40, "Image to display:");
              o->labelsize(12);
              o->align(FL_ALIGN_TOP_LEFT);
              o->end();
            }
            { Fl_Round_Button* o = m_RadioSNAPViewOriginal = new Fl_Round_Button(25, 585, 105, 15, "Original");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->value(1);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_m_RadioSNAPViewOriginal);
            }
            { Fl_Round_Button* o = m_RadioSNAPViewPreprocessed = new Fl_Round_Button(25, 600, 105, 15, "Preprocessed");
              o->type(102);
              o->down_box(FL_ROUND_DOWN_BOX);
              o->labelsize(12);
              o->callback((Fl_Callback*)cb_m_RadioSNAPViewPreprocessed);
            }
            { Fl_Value_Slider* o = m_InSNAPLabelOpacity = new Fl_Value_Slider(10, 635, 125, 15, "Label opacity:");
              o->type(1);
              o->labelsize(12);
              o->maximum(255);
              o->step(1);
              o->value(128);
              o->callback((Fl_Callback*)cb_m_InSNAPLabelOpacity);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            o->end();
          }
          { Fl_Button* o = m_BtnCancelSegmentation = new Fl_Button(10, 670, 125, 25, "Cancel SNAP Mode");
            o->tooltip("Cancel segmentation and return");
            o->box(FL_PLASTIC_UP_BOX);
            o->color(140);
            o->labelsize(12);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_m_BtnCancelSegmentation);
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    { Fl_Output* o = m_OutMessage = new Fl_Output(10, 735, 870, 20, "IRIS Status Messages");
      o->box(FL_FLAT_BOX);
      o->color(14);
      o->labeltype(FL_NO_LABEL);
      o->align(FL_ALIGN_CENTER);
    }
    { Fl_Wizard* o = m_WizWindows = new Fl_Wizard(145, -5, 730, 715);
      { Fl_Group* o = m_GrpIRISWindows = new Fl_Group(145, -5, 730, 715);
        { Fl_Group* o = m_GrpIRISAxial = new Fl_Group(145, 0, 365, 355);
          o->box(FL_UP_BOX);
          { IRISSliceWindow* o = Win2D[0] = new IRISSliceWindow(150, 5, 340, 320, "m_GrpIRISAxial(0)");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Scrollbar* o = m_InIRISSliceSlider[0] = new Fl_Scrollbar(490, 5, 15, 320);
            o->minimum(1);
            o->maximum(0);
            o->callback((Fl_Callback*)cb_m_InIRISSliceSlider);
          }
          { Fl_Button* o = Accept_button[0] = new Fl_Button(155, 330, 65, 20, "accept poly");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_Accept_button);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = m_BtnPaste[0] = new Fl_Button(250, 330, 65, 20, "paste");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_m_BtnPaste);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = new Fl_Button(340, 330, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Output* o = Position[0] = new Fl_Output(420, 330, 65, 20);
            o->box(FL_FLAT_BOX);
            o->color(49);
            o->textsize(10);
            o->align(FL_ALIGN_CENTER);
            o->deactivate();
          }
          o->end();
        }
        { Fl_Group* o = m_GrpIRISSagittal = new Fl_Group(510, 0, 365, 355);
          o->box(FL_UP_BOX);
          { IRISSliceWindow* o = Win2D[1] = new IRISSliceWindow(515, 5, 340, 320, "m_GrpIRISSagittal(1)");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Scrollbar* o = m_InIRISSliceSlider[1] = new Fl_Scrollbar(855, 5, 15, 320);
            o->minimum(1);
            o->maximum(0);
            o->callback((Fl_Callback*)cb_m_InIRISSliceSlider1);
          }
          { Fl_Button* o = Accept_button[1] = new Fl_Button(520, 330, 65, 20, "accept poly");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_Accept_button1);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = m_BtnPaste[1] = new Fl_Button(615, 330, 65, 20, "paste");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_m_BtnPaste1);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = new Fl_Button(710, 330, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset1);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Output* o = Position[1] = new Fl_Output(785, 330, 70, 20);
            o->box(FL_FLAT_BOX);
            o->color(49);
            o->textsize(10);
            o->align(FL_ALIGN_CENTER);
            o->deactivate();
          }
          o->end();
        }
        { Fl_Group* o = m_GrpIRISCoronal = new Fl_Group(510, 355, 365, 355);
          o->box(FL_UP_BOX);
          { Fl_Scrollbar* o = m_InIRISSliceSlider[2] = new Fl_Scrollbar(855, 360, 15, 315);
            o->minimum(1);
            o->maximum(0);
            o->callback((Fl_Callback*)cb_m_InIRISSliceSlider2);
          }
          { Fl_Button* o = Accept_button[2] = new Fl_Button(520, 685, 65, 20, "accept poly");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_Accept_button2);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = m_BtnPaste[2] = new Fl_Button(615, 685, 65, 20, "paste");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_m_BtnPaste2);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = new Fl_Button(710, 685, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset2);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Output* o = Position[2] = new Fl_Output(785, 685, 70, 20);
            o->box(FL_FLAT_BOX);
            o->color(49);
            o->textsize(10);
            o->align(FL_ALIGN_CENTER);
            o->deactivate();
          }
          { IRISSliceWindow* o = Win2D[2] = new IRISSliceWindow(515, 360, 340, 320, "m_GrpIRISCoronal(2)");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(o);
          }
          o->end();
        }
        { Fl_Group* o = m_GrpIRISView3D = new Fl_Group(145, 355, 365, 355);
          o->box(FL_UP_BOX);
          { Window3D* o = m_IRISWindow3D = new Window3D(150, 360, 355, 320, "3D");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
            Fl_Group::current()->resizable(o);
          }
          { Fl_Button* o = m_BtnMeshUpdate = new Fl_Button(155, 685, 65, 20, "update mesh");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_m_BtnMeshUpdate);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Button* o = m_BtnAccept3D = new Fl_Button(250, 685, 65, 20, "accept");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_m_BtnAccept3D);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = new Fl_Button(355, 685, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->down_box(FL_PLASTIC_DOWN_BOX);
            o->color(180);
            o->selection_color(94);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset3);
            o->align(FL_ALIGN_WRAP);
          }
          o->end();
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      { Fl_Group* o = m_GrpSNAPWindows = new Fl_Group(145, 0, 730, 710);
        o->hide();
        { Fl_Group* o = m_GrpSNAPAxial = new Fl_Group(145, 0, 365, 355);
          o->box(FL_UP_BOX);
          { SNAPSliceWindow* o = m_SNAPWindow2D[0] = new SNAPSliceWindow(150, 5, 340, 320, "m_GrpIRISAxial(0)");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Scrollbar* o = m_InSNAPSliceSlider[0] = new Fl_Scrollbar(490, 5, 15, 320);
            o->minimum(1);
            o->maximum(0);
            o->callback((Fl_Callback*)cb_m_InSNAPSliceSlider);
          }
          { Fl_Button* o = new Fl_Button(345, 330, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->color(140);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset4);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Output* o = OnSNAPSliceSliderChange[0] = new Fl_Output(430, 330, 70, 20);
            o->box(FL_NO_BOX);
            o->color(49);
            o->textsize(10);
            o->align(FL_ALIGN_CENTER);
            o->deactivate();
          }
          o->end();
        }
        { Fl_Group* o = m_GrpSNAPSagittal = new Fl_Group(510, 0, 365, 355);
          o->box(FL_UP_BOX);
          { SNAPSliceWindow* o = m_SNAPWindow2D[1] = new SNAPSliceWindow(515, 5, 340, 320, "m_GrpIRISSagittal(1)");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Scrollbar* o = m_InSNAPSliceSlider[1] = new Fl_Scrollbar(855, 5, 15, 320);
            o->minimum(1);
            o->maximum(0);
            o->callback((Fl_Callback*)cb_m_InSNAPSliceSlider1);
          }
          { Fl_Button* o = new Fl_Button(710, 330, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->color(140);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset5);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Output* o = OnSNAPSliceSliderChange[1] = new Fl_Output(795, 330, 70, 20);
            o->box(FL_NO_BOX);
            o->color(49);
            o->textsize(10);
            o->align(FL_ALIGN_CENTER);
            o->deactivate();
          }
          o->end();
        }
        { Fl_Group* o = m_GrpSNAPCoronal = new Fl_Group(510, 355, 365, 355);
          o->box(FL_UP_BOX);
          { Fl_Scrollbar* o = m_InSNAPSliceSlider[2] = new Fl_Scrollbar(855, 360, 15, 320);
            o->minimum(1);
            o->maximum(0);
            o->callback((Fl_Callback*)cb_m_InSNAPSliceSlider2);
          }
          { Fl_Button* o = new Fl_Button(710, 685, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->color(140);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset6);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Output* o = OnSNAPSliceSliderChange[2] = new Fl_Output(795, 685, 70, 20);
            o->box(FL_NO_BOX);
            o->color(49);
            o->textsize(10);
            o->align(FL_ALIGN_CENTER);
            o->deactivate();
          }
          { SNAPSliceWindow* o = m_SNAPWindow2D[2] = new SNAPSliceWindow(515, 360, 340, 320, "m_GrpIRISCoronal(2)");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
          }
          o->end();
        }
        { Fl_Group* o = m_GRPSNAPView3D = new Fl_Group(145, 355, 365, 355);
          o->box(FL_UP_BOX);
          { Window3D* o = m_SNAPWindow3D = new Window3D(150, 360, 355, 320, "3D");
            o->box(FL_BORDER_BOX);
            o->color(49);
            o->selection_color(49);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(56);
            o->align(FL_ALIGN_CENTER);
            o->when(FL_WHEN_RELEASE);
          }
          { Fl_Button* o = m_BtnSNAPMeshUpdate = new Fl_Button(155, 685, 65, 20, "update mesh");
            o->box(FL_PLASTIC_UP_BOX);
            o->color(140);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_m_BtnSNAPMeshUpdate);
            o->align(FL_ALIGN_WRAP);
            o->deactivate();
          }
          { Fl_Button* o = new Fl_Button(355, 685, 65, 20, "reset view");
            o->box(FL_PLASTIC_UP_BOX);
            o->color(140);
            o->labelsize(9);
            o->labelcolor(0);
            o->callback((Fl_Callback*)cb_reset7);
            o->align(FL_ALIGN_WRAP);
          }
          { Fl_Check_Button* o = m_ChkContinuousView3DUpdate = new Fl_Check_Button(225, 685, 25, 20, "update continuously");
            o->down_box(FL_DOWN_BOX);
            o->labelsize(11);
            o->callback((Fl_Callback*)cb_m_ChkContinuousView3DUpdate);
            o->deactivate();
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
  { Fl_Window* o = m_WinLoadLabel = new Fl_Window(330, 100, "Load Color Labels");
    w = o;
    o->color(45);
    o->labelfont(5);
    o->labelcolor(176);
    o->user_data((void*)(this));
    { Fl_Input* o = m_InLoadLabelFilename = new Fl_Input(85, 20, 180, 25, "File Name");
      o->labelfont(1);
    }
    { Fl_Button* o = new Fl_Button(265, 20, 45, 25, "select");
      o->down_box(FL_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_select);
    }
    { Fl_Button* o = new Fl_Button(45, 60, 85, 30, "Okay");
      o->down_box(FL_DOWN_BOX);
      o->shortcut(0x1ff0d);
      o->color(48);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Okay);
    }
    { Fl_Button* o = new Fl_Button(210, 60, 85, 30, "Cancel");
      o->down_box(FL_DOWN_BOX);
      o->color(48);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel);
    }
    o->end();
  }
  { Fl_Window* o = m_WinSaveLabel = new Fl_Window(330, 100, "Save Color Labels");
    w = o;
    o->color(45);
    o->labelfont(5);
    o->labelcolor(176);
    o->user_data((void*)(this));
    { Fl_Input* o = m_InSaveLabelFilename = new Fl_Input(85, 20, 180, 25, "FileName");
      o->labelfont(1);
    }
    { Fl_Button* o = new Fl_Button(265, 20, 45, 25, "select");
      o->down_box(FL_UP_BOX);
      o->labelsize(10);
      o->callback((Fl_Callback*)cb_select1);
    }
    { Fl_Button* o = new Fl_Button(45, 60, 90, 30, "Okay");
      o->down_box(FL_DOWN_BOX);
      o->shortcut(0x1ff0d);
      o->color(48);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Okay1);
    }
    { Fl_Button* o = new Fl_Button(210, 60, 85, 30, "Cancel");
      o->down_box(FL_DOWN_BOX);
      o->color(48);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel1);
    }
    o->end();
  }
  { Fl_Window* o = m_WinEditLabel = new Fl_Window(245, 215, "Edit Color Label");
    w = o;
    o->labelsize(12);
    o->user_data((void*)(this));
    { Fl_Color_Chooser* o = m_GrpEditLabelColorChooser = new Fl_Color_Chooser(5, 5, 200, 95, "Choose New Label Color");
      o->box(FL_UP_BOX);
      o->color(49);
      o->selection_color(49);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(56);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
      o->end();
    }
    { Fl_Value_Slider* o = m_InEditLabelAlpha = new Fl_Value_Slider(215, 15, 20, 85, "alpha");
      o->type(2);
      o->selection_color(12);
      o->labelsize(10);
      o->minimum(1);
      o->maximum(0);
      o->value(0.2);
      o->textsize(8);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Input* o = m_InEditLabelName = new Fl_Input(25, 125, 115, 25, "Label Name");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->textfont(1);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Check_Button* o = m_InEditLabelVisibility = new Fl_Check_Button(20, 150, 65, 25, "visible");
      o->down_box(FL_DIAMOND_DOWN_BOX);
      o->value(1);
      o->selection_color(14);
    }
    { Fl_Check_Button* o = m_InEditLabelMesh = new Fl_Check_Button(85, 150, 65, 25, "mesh");
      o->down_box(FL_DIAMOND_DOWN_BOX);
      o->value(1);
      o->selection_color(60);
    }
    { Fl_Group* o = new Fl_Group(165, 125, 70, 45);
      { Fl_Round_Button* o = m_BtnEditLabelAdd = new Fl_Round_Button(165, 125, 70, 25, "add");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->selection_color(4);
      }
      { Fl_Round_Button* o = m_BtnEditLabelChange = new Fl_Round_Button(165, 145, 70, 25, "change");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->selection_color(4);
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(15, 180, 65, 25, "Okay");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Okay2);
    }
    { Fl_Button* o = new Fl_Button(90, 180, 65, 25, "Apply");
      o->shortcut(0x1ff0d);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Apply);
    }
    { Fl_Button* o = new Fl_Button(165, 180, 65, 25, "Close");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Close);
    }
    o->end();
  }
  { Fl_Window* o = m_WinRenderOptions = new Fl_Window(375, 245, "Rendering Options");
    w = o;
    o->user_data((void*)(this));
    o->align(FL_ALIGN_CENTER);
    { Fl_Tabs* o = new Fl_Tabs(0, 5, 375, 210);
      o->labelsize(12);
      o->align(FL_ALIGN_CENTER);
      { Fl_Group* o = new Fl_Group(0, 30, 375, 180, "2D Views");
        o->box(FL_FLAT_BOX);
        { Fl_Group* o = new Fl_Group(35, 90, 120, 50, "Bilinear Interpolation");
          { Fl_Check_Button* o = new Fl_Check_Button(35, 90, 120, 25, "on seg overlay");
            o->down_box(FL_DIAMOND_DOWN_BOX);
            o->callback((Fl_Callback*)cb_on);
          }
          { Fl_Check_Button* o = new Fl_Check_Button(35, 112, 120, 25, "on greyscale");
            o->down_box(FL_DIAMOND_DOWN_BOX);
            o->callback((Fl_Callback*)cb_on1);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 30, 375, 185, "Gaussian Blur");
        o->box(FL_FLAT_BOX);
        o->hide();
        { Fl_Group* o = new Fl_Group(35, 60, 245, 45, "Standard deviation in voxels:");
          o->align(FL_ALIGN_TOP_LEFT);
          m_InRenderOptionsGaussianStandardDeviationX = new Fl_Value_Input(60, 60, 55, 25, "x:");
          m_InRenderOptionsGaussianStandardDeviationY = new Fl_Value_Input(140, 60, 55, 25, "y:");
          m_InRenderOptionsGaussianStandardDeviationZ = new Fl_Value_Input(215, 60, 55, 25, "z:");
          o->end();
        }
        { Fl_Group* o = new Fl_Group(35, 130, 260, 45, "Maximum error w.r.t the true Gaussian:");
          o->align(FL_ALIGN_TOP_LEFT);
          { Fl_Value_Slider* o = m_InRenderOptionsGaussianError = new Fl_Value_Slider(60, 135, 210, 25);
            o->type(1);
            o->color(7);
            o->minimum(0.01);
            o->maximum(0.2);
            o->value(0.05);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 30, 375, 180, "Mesh Decimate");
        o->box(FL_FLAT_BOX);
        o->hide();
        { Fl_Check_Button* o = m_InRenderOptionsDecimateTopology = new Fl_Check_Button(210, 70, 145, 25, "Preserve Topology");
          o->down_box(FL_DIAMOND_DOWN_BOX);
        }
        { Fl_Value_Slider* o = m_InRenderOptionsDecimateIterations = new Fl_Value_Slider(235, 110, 95, 25, "Maximum Iterations");
          o->type(1);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
        }
        { Fl_Value_Input* o = m_InRenderOptionsDecimateReductions = new Fl_Value_Input(15, 40, 55, 25, "Target Reductions");
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Input* o = m_InRenderOptionsDecimateInitialError = new Fl_Value_Input(15, 70, 55, 25, "Initial Error");
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Input* o = m_InRenderOptionsDecimateErrorIncrement = new Fl_Value_Input(15, 100, 55, 25, "Error Increment");
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Input* o = m_InRenderOptionsDecimateAspectRatio = new Fl_Value_Input(15, 130, 55, 25, "Aspect Ratio");
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Input* o = m_InRenderOptionsDecimateFeatureAngle = new Fl_Value_Input(15, 160, 55, 25, "Feature Angle");
          o->align(FL_ALIGN_RIGHT);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 30, 375, 180, "Mesh Smooth");
        o->box(FL_FLAT_BOX);
        o->hide();
        { Fl_Check_Button* o = m_InRenderOptionsMeshSmoothFeatureEdge = new Fl_Check_Button(185, 50, 180, 25, "Feature Edge Smoothing");
          o->down_box(FL_DIAMOND_DOWN_BOX);
        }
        { Fl_Check_Button* o = m_InRenderOptionsMeshSmoothBoundarySmoothing = new Fl_Check_Button(185, 75, 180, 25, "Boundary Smoothing");
          o->down_box(FL_DIAMOND_DOWN_BOX);
        }
        { Fl_Value_Input* o = m_InRenderOptionsMeshSmoothFeatureAngle = new Fl_Value_Input(15, 50, 55, 25, "Feature Angle");
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Input* o = m_InRenderOptionsMeshSmoothConvergence = new Fl_Value_Input(15, 85, 55, 25, "Convergence");
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Input* o = m_InRenderOptionsMeshSmoothRelaxation = new Fl_Value_Input(15, 120, 55, 25, "Relaxation");
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Value_Slider* o = m_InRenderOptionsMeshSmoothIterations = new Fl_Value_Slider(215, 115, 95, 25, "Number of Iterations");
          o->type(1);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Button* o = new Fl_Button(90, 215, 65, 25, "Okay");
      o->down_box(FL_DOWN_BOX);
      o->shortcut(0x1ff0d);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Okay3);
    }
    { Fl_Button* o = new Fl_Button(235, 215, 65, 25, "Cancel");
      o->down_box(FL_DOWN_BOX);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel2);
    }
    o->end();
  }
  { Fl_Window* o = m_WinAbout = new Fl_Window(353, 171, "About SnAP");
    w = o;
    o->user_data((void*)(this));
    { Fl_Clock* o = new Fl_Clock(30, 35, 85, 80, "SnAP");
      o->box(FL_OFLAT_BOX);
      o->color(196);
      o->selection_color(215);
      o->labelfont(3);
      o->labelsize(24);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Output* o = m_OutAboutCompiled = new Fl_Output(10, 120, 125, 20);
      o->box(FL_FLAT_BOX);
      o->color(50);
      o->selection_color(46);
      o->labeltype(FL_NO_LABEL);
      o->textfont(2);
      o->textsize(10);
    }
    { Fl_Output* o = m_OutAboutCredits = new Fl_Output(140, 5, 200, 155, "m_OutAboutCredits:");
      o->type(12);
      o->box(FL_THIN_DOWN_BOX);
      o->color(49);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(2);
      o->textsize(10);
      o->align(FL_ALIGN_TOP);
    }
    { Fl_Button* o = new Fl_Button(45, 145, 60, 20, "close");
      o->box(FL_ROUND_UP_BOX);
      o->down_box(FL_ROUND_DOWN_BOX);
      o->shortcut(0xff0d);
      o->labelfont(3);
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_close);
    }
    o->end();
  }
  { Fl_Window* o = m_WinSnakeParameters = new Fl_Window(344, 269, "Snake Parameters");
    w = o;
    o->user_data((void*)(this));
    { Fl_Return_Button* o = m_BtnSnakeParametersOk = new Fl_Return_Button(5, 235, 65, 30, "Okay");
      o->callback((Fl_Callback*)cb_m_BtnSnakeParametersOk);
    }
    { Fl_Button* o = m_BtnSnakeParametersClose = new Fl_Button(275, 235, 64, 30, "Close");
      o->callback((Fl_Callback*)cb_m_BtnSnakeParametersClose);
    }
    { Fl_Group* o = m_GrpSnakeParametersConstraints = new Fl_Group(5, 95, 335, 135, "Constraints");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Group* o = m_GrpSnakeParametersDefaults = new Fl_Group(5, 115, 335, 40);
        o->hide();
        o->deactivate();
        { Fl_Round_Button* o = m_BtnSnakeParametersUserDefined = new Fl_Round_Button(20, 135, 20, 15, "user defined:");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_m_BtnSnakeParametersUserDefined);
        }
        { Fl_Round_Button* o = m_BtnSnakeParametersSchlegel = new Fl_Round_Button(135, 115, 20, 15, "Schlegel");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_m_BtnSnakeParametersSchlegel);
        }
        { Fl_Round_Button* o = m_BtnSnakeParametersTurello = new Fl_Round_Button(255, 115, 20, 15, "Turello");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_m_BtnSnakeParametersTurello);
        }
        { Fl_Round_Button* o = m_BtnSnakeParametersSapiro = new Fl_Round_Button(20, 115, 20, 15, "Sapiro");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_m_BtnSnakeParametersSapiro);
        }
        o->end();
      }
      { Fl_Group* o = m_GrpSnakeParametersSliders = new Fl_Group(5, 115, 335, 110);
        o->labelsize(10);
        { Fl_Value_Slider* o = m_InSnakeParametersGradientExponent = new Fl_Value_Slider(175, 155, 155, 15, "r_delg:");
          o->type(1);
          o->labelsize(10);
          o->step(1);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = m_InSnakeParametersSmoothingWeight = new Fl_Value_Slider(15, 205, 155, 15, "c_smooth:");
          o->type(1);
          o->labelsize(10);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = m_InSnakeParametersMCFWeight = new Fl_Value_Slider(15, 130, 155, 15, "c_MCF:");
          o->type(1);
          o->labelsize(10);
          o->value(0.7);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = m_InSnakeParametersSpeedExponent = new Fl_Value_Slider(175, 180, 155, 15, "r_c:");
          o->type(1);
          o->labelsize(10);
          o->maximum(2);
          o->step(1);
          o->value(1);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = m_InSnakeParametersSmoothingExponent = new Fl_Value_Slider(175, 205, 155, 15, "r_smooth:");
          o->type(1);
          o->labelsize(10);
          o->maximum(2);
          o->step(1);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = m_InSnakeParametersMCFExponent = new Fl_Value_Slider(175, 130, 155, 15, "r_MCF:");
          o->type(1);
          o->labelsize(10);
          o->minimum(-1);
          o->maximum(2);
          o->step(1);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Value_Slider* o = m_InSnakeParametersGradientWeight = new Fl_Value_Slider(15, 155, 155, 15, "c_delg:");
          o->type(1);
          o->labelsize(10);
          o->step(1);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = m_GrpSnakeParametersProperties = new Fl_Group(5, 5, 335, 85, "Propagation");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Value_Slider* o = m_InSnakeParametersTimeStep = new Fl_Value_Slider(15, 40, 155, 15, "Time Step");
        o->type(1);
        o->labelsize(10);
        o->value(0.1);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Value_Slider* o = m_InSnakeParametersGround = new Fl_Value_Slider(175, 65, 155, 15, "Ground");
        o->type(1);
        o->labelsize(10);
        o->maximum(30);
        o->step(0.1);
        o->value(5);
        o->align(FL_ALIGN_TOP_LEFT);
        o->deactivate();
      }
      { Fl_Value_Slider* o = m_InSnakeParametersSpeed = new Fl_Value_Slider(175, 40, 155, 15, "Speed");
        o->type(1);
        o->labelsize(10);
        o->minimum(-5);
        o->maximum(5);
        o->step(0.1);
        o->value(5);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Check_Button* o = m_InSnakeParametersParamsClamp = new Fl_Check_Button(70, 60, 25, 25, "clamp to ground:");
        o->down_box(FL_DOWN_BOX);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_m_InSnakeParametersParamsClamp);
      }
      o->end();
    }
    { Fl_Button* o = m_BtnSnakeParametersApply = new Fl_Button(90, 235, 65, 30, "Apply");
      o->callback((Fl_Callback*)cb_m_BtnSnakeParametersApply);
    }
    o->set_non_modal();
    o->end();
  }
  { Fl_Window* o = m_WinHelp = new Fl_Window(365, 710, "SNAP/IRIS Help Window");
    w = o;
    o->color(53);
    o->user_data((void*)(this));
    { Fl_Help_View* o = m_BrsHelp = new Fl_Help_View(5, 5, 355, 660);
      o->color(17);
    }
    { Fl_Button* o = new Fl_Button(15, 675, 75, 25, "Contents");
      o->box(FL_PLASTIC_UP_BOX);
      o->color(180);
      o->labelfont(1);
      o->labelsize(12);
    }
    { Fl_Button* o = new Fl_Button(100, 675, 75, 25, "@<-  Back");
      o->box(FL_PLASTIC_UP_BOX);
      o->color(180);
      o->labelfont(1);
      o->labelsize(12);
    }
    { Fl_Button* o = new Fl_Button(185, 675, 80, 25, "@->  Forward");
      o->box(FL_PLASTIC_UP_BOX);
      o->color(180);
      o->labelfont(1);
      o->labelsize(12);
    }
    { Fl_Button* o = new Fl_Button(275, 675, 70, 25, "Close");
      o->box(FL_PLASTIC_UP_BOX);
      o->color(180);
      o->labelfont(1);
      o->labelsize(12);
    }
    o->end();
  }
}
