# data file for the Fltk User Interface Designer (fluid)
version 1.0106 
header_name {.h} 
code_name {.cxx}
class DeformableRegistration3DTimeSeriesGUI {open : {public fltk::DeformableRegistration3DTimeSeriesBase}
} {
  Function {DeformableRegistration3DTimeSeriesGUI()} {open
  } {
    Fl_Window externalWindow {
      label {4D ImageViewer-ISIS Center} open
      xywh {4 30 695 680} type Double resizable
      code0 {\#include "DeformableRegistration3DTimeSeriesBase.h"} visible
    } {
      Fl_Box fltkRenderWindowInteractor {
        xywh {0 20 690 455} box DOWN_FRAME
        code0 {\#include "vtkFlRenderWindowInteractor.h"}
        class vtkFlRenderWindowInteractor
      }
      Fl_Value_Slider slider {
        label Slice
        callback {this->SelectSlice(static_cast<int>(slider->value()));
  fltkRenderWindowInteractor->redraw();
  Fl::check();}
        xywh {43 497 430 29} type Horizontal align 4 maximum 50 step 1 deactivate
      }
      Fl_Round_Button Axial {
        label Axial
        user_data 1
        callback {if(Axial->value()==1) 
{
this->ViewSlice();
this->SelectAxis(2);
this->slider->maximum(this->GetMaximum());
VolumeBox->label("Volume Axial");
DirectRendering->hide();
slider->show();
fltkRenderWindowInteractor->redraw();
}}
        xywh {64 560 50 25} type Radio down_box ROUND_DOWN_BOX value 1 deactivate
      }
      Fl_Round_Button Sagittal {
        label Sagittal
        user_data 0
        callback {if(Sagittal->value()==1)
{
 this->ViewSlice();
 this->SelectAxis(1); 
 this->slider->maximum(this->GetMaximum()); 
VolumeBox->label("Volume Saggital");
DirectRendering->hide();
slider->show();
 fltkRenderWindowInteractor->redraw();
}}
        xywh {170 560 70 25} type Radio down_box ROUND_DOWN_BOX deactivate
      }
      Fl_Round_Button Coronar {
        label Coronal
        user_data 0
        callback {if(Coronar->value()==1) 
{
this->ViewSlice();
this->SelectAxis(0);
this->slider->maximum(this->GetMaximum());
fltkRenderWindowInteractor->redraw();
VolumeBox->label("Volume Coronal");
DirectRendering->hide();
slider->show();
fltkRenderWindowInteractor->redraw();
}}
        xywh {290 560 75 25} type Radio down_box ROUND_DOWN_BOX deactivate
      }
      Fl_Menu_Bar {} {
        label Menu_Bar open
        xywh {0 0 695 20}
      } {
        submenu {} {
          label File open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label {Load 4D raw data}
            callback {this->LoadRawData();
 fltkRenderWindowInteractor->redraw();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Load 4D vector field}
            callback {this->LoadDeformableFieldData();
 fltkRenderWindowInteractor->redraw();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label {Load 3D segmented data}
            callback {this->LoadSegmentedData();
 fltkRenderWindowInteractor->redraw();}
            xywh {5 5 100 20}
          }
          menuitem {} {
            label LoadDicomSeries
            callback {this->LoadDicomSeries();
 fltkRenderWindowInteractor->redraw();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label {Save 4D deformation field}
            callback {this->Save4DDeformationImage();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label {Save 4D segmented data}
            callback {this->Save4DSegmentedImage();}
            xywh {10 10 100 20}
          }
          menuitem {} {
            label {Save 3D Segmented data}
            callback {this->Save3DSegmentedImage();}
            xywh {0 0 100 20}
          }
          menuitem Quit {
            label Quit
            callback {Fl::first_window()->hide();
exit(0);}
            xywh {30 30 100 20}
          }
        }
        submenu Genfield {
          label {Generate deformable field} open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label {Use Demons deformation}
            callback {RegistrationSettings->show();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Use BSpline deformation}
            callback {BSplineRegistrationSettings->show();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Use FEM deformation}
            callback {this->StartFEMDeformation();}
            xywh {0 0 100 20}
          }
        }
        submenu ViewPath {
          label {View Path} open
          xywh {5 5 100 20}
        } {
          menuitem VPathSP {
            label {View path of the selected point}
            callback {if(point_selected)
{
  MotionPathView->label("Display the path of the selected point");
  this->ComputePathSelectedPoint();
  MotionPathView->show();
  fltkRenderWindowInteractor2->show();
}}
            xywh {0 0 100 20}
          }
          menuitem VPathSV {
            label {View path of the segmented volume}
            callback {if(m_segmented_loaded&&m_deformable_loaded)
{
MotionPathView->label("Display the motion path of the segmented volume");
this->ComputePathSelectedVolume();
MotionPathView->show();
fltkRenderWindowInteractor2->show();
}}
            xywh {0 0 100 20}
          }
        }
        submenu Options {
          label Options open
          xywh {0 0 100 20}
        } {
          menuitem {} {
            label {Window/Level}
            callback {int * WindowLevel;
  WindowLevel=this->GetWindowLevel();
  WindowSlider->value(WindowLevel[0]);
  LevelSlider->value(WindowLevel[1]);
WindowLevelWindow->show();}
            xywh {0 0 100 20}
          }
          menuitem TransferFunction {
            label TransferFunction
            callback {DirectRenderingSettings->show();
transFuncEditor->show();}
            xywh {0 0 100 20}
          }
          menuitem {} {
            label {Manual segmentation}
            callback {this->ManualSegmentationStart();}
            xywh {0 0 100 20}
          }
        }
      }
      Fl_Value_Slider slidertime {
        label Time
        callback {this->SelectTime(static_cast<int>(slidertime->value()));
  fltkRenderWindowInteractor->redraw();
  Fl::check();}
        xywh {43 532 430 29} type Horizontal align 4 maximum 50 step 1 deactivate
      }
      Fl_Button start {
        label Start
        callback {Fl::add_timeout(0, timer_callback,this);}
        xywh {13 607 67 29} box THIN_UP_BOX deactivate
      }
      Fl_Choice fps {
        label Fps
        callback {//} open
        xywh {183 606 70 25} box THIN_UP_BOX down_box THIN_UP_BOX
      } {
        menuitem {} {
          label 15
          xywh {0 0 100 20}
        }
        menuitem {} {
          label 30
          xywh {0 0 100 20}
        }
        menuitem {} {
          label 60
          xywh {0 0 100 20}
        }
        menuitem {} {
          label {1/17}
          xywh {0 0 100 20}
        }
      }
      Fl_Choice timeorslice {
        label {Time/Slice} open
        xywh {324 606 140 25} box THIN_UP_BOX down_box THIN_UP_BOX
      } {
        menuitem {} {
          label Slice
          xywh {0 0 100 20}
        }
        menuitem {} {
          label Time
          xywh {0 0 100 20} value 1
        }
        menuitem {} {
          label Both
          xywh {0 0 100 20} value 1
        }
      }
      Fl_Button stop {
        label Stop
        callback {Fl::remove_timeout(timer_callback,this);}
        xywh {80 607 65 29} box THIN_UP_BOX deactivate
      }
      Fl_Box {} {
        xywh {484 474 206 171} box PLASTIC_UP_BOX align 25
      }
      Fl_Box VolumeBox {
        label {Volume slicer}
        xywh {0 476 483 109} box PLASTIC_UP_FRAME align 21
      }
      Fl_Box {} {
        label {Animation Controls}
        xywh {0 587 482 58} box PLASTIC_UP_FRAME align 21
      }
      Fl_Choice {} {
        label View open
        xywh {519 610 170 25} box THIN_UP_BOX down_box THIN_UP_BOX
      } {
        menuitem GrayImageActive {
          label {4D grayscale image}
          callback {this->ActivateRawData();
 fltkRenderWindowInteractor->redraw();}
          xywh {5 5 100 20} type Toggle value 1
        }
        menuitem DeformableFieldActive {
          label {4D deformable field}
          callback {this->ActivateDeformableFieldData();
 fltkRenderWindowInteractor->redraw();}
          xywh {5 5 100 20} type Toggle value 1
        }
        menuitem SegmentedImageActive {
          label {4D segmented image}
          callback {this->ActivateSegmentedData();
 fltkRenderWindowInteractor->redraw();}
          xywh {10 10 100 20} type Toggle value 1
        }
      }
      Fl_Box {} {
        label {Deformation info}
        xywh {0 645 691 30} box PLASTIC_UP_FRAME align 21
      }
      Fl_Slider progressBar {
        label slider
        xywh {120 648 335 22} type {Horz Fill} box BORDER_BOX color 48 selection_color 90 labeltype NO_LABEL align 4 deactivate
        code0 {\#include"fltkProgressBar.h"}
        class {fltk::ProgressBar}
      }
      Fl_Value_Output TotalTime {
        label {Total time}
        xywh {612 648 70 23}
      }
      Fl_Button {} {
        label Abort
        callback {this->AbortDeformation();}
        xywh {455 647 80 23} box THIN_UP_BOX
      }
      Fl_Choice {} {
        label {Field type} open
        xywh {555 585 134 25} box THIN_UP_BOX down_box THIN_UP_BOX
      } {
        menuitem {} {
          label Glyph
          callback {this->SelectFieldType(0);
fltkRenderWindowInteractor->redraw();}
          xywh {0 0 100 20}
        }
        menuitem {} {
          label Grid
          callback {this->SelectFieldType(1);
fltkRenderWindowInteractor->redraw();}
          xywh {0 0 100 20}
        }
      }
      Fl_Roller m_SegmentedVolumeOpacityControl {
        label Blend
        callback {this->SetSegmentedVolumeOpacity( m_SegmentedVolumeOpacityControl->value());
fltkRenderWindowInteractor->redraw();}
        xywh {483 560 204 24} type Horizontal align 1 value 1
      }
      Fl_Round_Button threeD {
        label 3D
        user_data 0
        callback {if(threeD->value()==1) 
{
ViewVolume();
VolumeBox->label("Volume 3D");
slider->hide();
DirectRendering->show();
fltkRenderWindowInteractor->redraw();
}}
        xywh {395 560 75 25} type Radio down_box ROUND_DOWN_BOX deactivate
      }
      Fl_Choice DirectRendering {
        label DirectRendering open
        xywh {125 500 110 25} down_box BORDER_BOX hide
      } {
        menuitem {} {
          label RayCasting
          xywh {0 0 100 20}
        }
        menuitem {} {
          label Texture2DMapping
          xywh {0 0 100 20}
        }
        menuitem {} {
          label {Marching Cubes}
          xywh {0 0 100 20}
        }
      }
      Fl_Button addpolygonbutton {
        label {Add polygon }
        callback {this->RasterizePolygon();}
        xywh {490 515 195 30} box THIN_UP_BOX hide
      }
      Fl_Button drawpolygonbutton {
        label {Draw polygon }
        callback {this->ManualSegmentationStart();}
        xywh {490 480 195 30} box THIN_UP_BOX
      }
    }
    Fl_Window MotionPathView {
      label {Motion Path of the segmented object}
      xywh {-32000 -32000 449 517} type Double hide resizable
    } {
      Fl_Box fltkRenderWindowInteractor2 {
        xywh {0 0 445 325} box DOWN_FRAME
        code0 {\#include "vtkFlRenderWindowInteractor.h"}
        class vtkFlRenderWindowInteractor
      }
      Fl_Text_Editor disp {
        xywh {0 330 445 135}
        code0 {Fl_Text_Buffer *g = buff =new Fl_Text_Buffer();}
        code1 {disp->buffer(g);}
        code2 {g->text("Displacement of the center of gravity\\n");}
      }
      Fl_Button {} {
        label OK
        callback {MotionPathView->hide();}
        xywh {155 475 140 30}
      }
    }
    code {//General view
  fltkRenderWindowInteractor->SetRenderWindow( m_RenderWindow );
       // Interact with the data at 3 frames per second
   fltkRenderWindowInteractor->SetDesiredUpdateRate(3.0);
   fltkRenderWindowInteractor->SetStillUpdateRate(0.001);
   //Motion path view
   fltkRenderWindowInteractor2->SetRenderWindow( m_RenderWindow2 );
       // Interact with the data at 3 frames per second
   fltkRenderWindowInteractor2->SetDesiredUpdateRate(3.0);
   fltkRenderWindowInteractor2->SetStillUpdateRate(0.001);} {}
    Fl_Window WindowLevelWindow {
      label {Window/Level}
      xywh {1130 154 466 149} type Double hide
    } {
      Fl_Value_Slider WindowSlider {
        callback {this->SetWindowLevel(WindowSlider->value(),0);
fltkRenderWindowInteractor->redraw();
  Fl::check();}
        xywh {25 25 405 25} type Horizontal align 4 maximum 5000 step 1
      }
      Fl_Box {} {
        label Window
        xywh {19 20 425 35} box THIN_UP_FRAME align 5
      }
      Fl_Value_Slider LevelSlider {
        callback {this->SetWindowLevel(LevelSlider->value(),1);
fltkRenderWindowInteractor->redraw();
  Fl::check();}
        xywh {25 85 405 25} type Horizontal align 4 maximum 3000 step 1
      }
      Fl_Box {} {
        label Level
        xywh {20 80 425 35} box THIN_UP_FRAME align 5
      }
    }
    Fl_Window RegistrationSettings {
      label {Registration Settings}
      xywh {1104 328 426 375} type Double hide
    } {
      Fl_Button {} {
        label Start
        callback {RegistrationSettings->hide();
this->StartDemonsDeformation();}
        xywh {1 344 219 26}
      }
      Fl_Button {} {
        label Cancel
        callback {RegistrationSettings->hide();}
        xywh {226 344 194 26}
      }
      Fl_Group {} {
        label {Demons Registration Settings} open
        xywh {5 141 415 200} box THIN_UP_BOX align 21
      } {
        Fl_Value_Input DemonsStandardDeviations {
          label {Standard Deviations}
          xywh {15 204 125 24} align 8 maximum 100 step 0.1 value 4
        }
        Fl_Value_Input DemonsMaximumError {
          label {Maximum Error}
          xywh {15 236 125 24} align 8 step 0.01 value 0.08
        }
        Fl_Value_Input DemonsMaximumKernelWidth {
          label {Maximum Kernel Width}
          xywh {15 267 125 24} align 8 maximum 1000 step 1 value 150
        }
        Fl_Value_Input DemonsIntensityDifferenceThreshold {
          label {Intensity Difference Threshold}
          xywh {15 298 125 29} align 8 step 0.001 value 0.001
        }
        Fl_Value_Input DemonsNumberOfIterations {
          label {Number of iterations}
          xywh {15 169 125 29} align 8 maximum 1000 step 1 value 150
        }
      }
      Fl_Group {} {
        label {Histogram Matching Settings} open
        xywh {5 3 415 135} box THIN_UP_BOX align 21
      } {
        Fl_Value_Input DemonsHistogramLevels {
          label {Number of histogram levels}
          xywh {10 34 125 24} align 8 maximum 10000 step 1 value 1024
        }
        Fl_Value_Input DemonsMatchPoints {
          label {Number of match points}
          xywh {10 66 125 24} align 8 maximum 1000 step 1 value 7
        }
      }
    }
    Fl_Window DirectRenderingSettings {
      label {Transfer Function Editor} open
      xywh {4 30 928 346} type Double when 1
      class Fl_Double_Window visible
    } {
      Fl_Choice transfercolorchooser {
        label {Transfer function selection}
        callback {transFuncEditor->show();} open selected
        xywh {705 275 170 25} down_box BORDER_BOX align 5
      } {
        menuitem {} {
          label Color
          callback {transFuncEditor->SetActiveTransferFunction(1);}
          xywh {0 0 100 20}
        }
        menuitem {} {
          label Opacity
          callback {transFuncEditor->SetActiveTransferFunction(0);}
          xywh {0 0 100 20} value 1
        }
      }
      Fl_Box colorchooser {
        user_data this
        callback {Fl_Color_Chooser* c = (Fl_Color_Chooser*)o;
  DeformableRegistration3DTimeSeriesGUI* window = reinterpret_cast<DeformableRegistration3DTimeSeriesGUI*>(v);
  window->transFuncEditor->SetPointcolor(c->r(),c->g(),c->b());}
        xywh {701 2 220 200} box THIN_UP_FRAME
        code0 {\#include <FL/Fl_Color_Chooser.H>}
        code1 {//o->callback(chooser_cb,transFuncEditor);}
        class Fl_Color_Chooser
      }
      Fl_Return_Button {} {
        label OK
        xywh {5 305 175 35}
        code0 {DirectRenderingSettings->hide();}
      }
      Fl_Box transFuncEditor {
        label label
        xywh {1 3 695 300} box THIN_DOWN_FRAME
        code0 {\#include "TransferFunctionEditor.h"}
        code1 {o->SetColorChooser(colorchooser);}
        class TransferFunctionEditor
      }
    }
    Fl_Window BSplineRegistrationSettings {
      label BSplineRegistrationSettings
      xywh {412 277 449 572} type Double hide
    } {
      Fl_Group {} {
        label {Grid Settings} open
        xywh {6 8 434 165} box THIN_UP_BOX align 21
      } {
        Fl_Value_Input BSplineGridBorderSize {
          label {Grid Border Size}
          xywh {16 39 125 24} align 8 maximum 100 step 1 value 3
        }
        Fl_Value_Input BSplineLowSize {
          label {Low Size on image}
          xywh {16 71 125 24} align 8 maximum 100 step 1 value 5
        }
        Fl_Value_Input BSplineHighSize {
          label {High Size on image}
          xywh {16 104 125 24} align 8 maximum 100 step 1 value 10
        }
        Fl_Value_Input BSplineSplineOrder {
          label {Spline Order}
          xywh {16 139 125 24} align 8 maximum 100 step 1 value 3
        }
      }
      Fl_Group {} {
        label {Low Level BSpline Registration Settings} open
        xywh {6 181 433 179} box THIN_UP_BOX align 21
      } {
        Fl_Value_Input BSplineLowLineSearchAccuracy {
          label {Line Search Accuracy}
          xywh {24 247 125 24} align 8 maximum 10 step 0.1 value 0.9
        }
        Fl_Value_Input BSplineLowDefaultStepLength {
          label {Default Step Length}
          xywh {22 277 125 24} align 8 maximum 100 step 0.1 value 1.5
        }
        Fl_Value_Input BSplineLowMaxiumumNrFuncEvaluations {
          label {Maximum Number of Function Evaluations}
          xywh {24 307 125 24} align 8 maximum 3000 step 1 value 1000
        }
        Fl_Value_Input BsplineLowGradientConvergenceTolerance {
          label GradientConvergenceTolerance
          xywh {24 212 125 29} align 8 step 0.01 value 0.05
        }
      }
      Fl_Button StartBSplineRegistration {
        label Start
        callback {BSplineRegistrationSettings->hide();
this->StartBSplineDeformation();}
        xywh {6 535 224 30}
      }
      Fl_Button {} {
        label Cancel
        callback {BSplineRegistrationSettings->hide();}
        xywh {240 535 199 30}
      }
      Fl_Group {} {
        label {High Level BSpline Registration Settings} open
        xywh {6 365 434 165} box THIN_UP_BOX align 21
      } {
        Fl_Value_Input BSplineHighLineSearchAccuracy {
          label {Line Search Accuracy}
          xywh {21 431 125 24} align 8 maximum 10 step 0.1 value 0.9
        }
        Fl_Value_Input BSplineHighDefaultStepLength {
          label {Default Step Length}
          xywh {21 461 125 24} align 8 maximum 100 step 0.1 value 1.5
        }
        Fl_Value_Input BSplineHighMaxiumumNrFuncEvaluations {
          label {Maximum Number of Function Evaluations}
          xywh {21 491 125 24} align 8 maximum 3000 step 1 value 1000
        }
        Fl_Value_Input BsplineHighGradientConvergenceTolerance {
          label GradientConvergenceTolerance
          xywh {21 396 125 29} align 8 step 0.01 value 0.05
        }
      }
    }
    code {} {}
  }
  Function {~DeformableRegistration3DTimeSeriesGUI()} {open return_type virtual
  } {}
  Function {Show()} {open return_type {virtual void}
  } {
    code {externalWindow->show();
fltkRenderWindowInteractor->show();} {}
  }
  Function {Hide()} {open return_type {virtual void}
  } {
    code {externalWindow->hide();} {}
  }
  Function {LoadRawData()} {open C return_type {virtual void}
  } {}
  Function {LoadDeformableFieldData()} {open return_type {virtual void}
  } {}
  Function {SelectTime(int)} {open return_type {virtual void}
  } {}
  Function {timer_callback(void* v)} {open return_type {static void}
  } {
    code {DeformableRegistration3DTimeSeriesGUI* window = reinterpret_cast<DeformableRegistration3DTimeSeriesGUI*>(v);
  
  switch(window->timeorslice->value()){
    case 0:{
           if (window->slider->value()<window->slider->maximum())window->slider->value(window->slider->value()+1);
            else window->slider->value(0);
            window->SelectSlice(static_cast<int>(window->slider->value()));
            window->fltkRenderWindowInteractor->redraw();
      break;}
    case 1:{
           if (window->slidertime->value()<window->slidertime->maximum())window->slidertime->value(window->slidertime->value()+1);
            else window->slidertime->value(0);
            window->SelectTime(static_cast<int>(window->slidertime->value()));
            window->fltkRenderWindowInteractor->redraw();
      break;}
    case 2:{
      if (window->slidertime->value()<window->slidertime->maximum())window->slidertime->value(window->slidertime->value()+1);
            else window->slidertime->value(0);
      if (window->slider->value()<window->slider->maximum())window->slider->value(window->slider->value()+1);
            else window->slider->value(0);
            window->SelectTime(static_cast<int>(window->slidertime->value()));
            window->SelectSlice(static_cast<int>(window->slider->value()));
            window->fltkRenderWindowInteractor->redraw();

      break;}
  }
  
   switch(window->fps->value()){
    case 0:Fl::repeat_timeout(1.0 / 15.0, timer_callback,v);
    break;
    case 1:Fl::repeat_timeout(1.0 / 30.0, timer_callback,v);
    break;
    case 2:Fl::repeat_timeout(1.0 / 60.0, timer_callback,v);
    break;
    case 3:Fl::repeat_timeout(12, timer_callback,v);
    break;
}} {}
  }
  Function {LoadSegmentedData()} {open return_type {virtual void}
  } {}
  Function {StartDemonsDeformation()} {open return_type {virtual void}
  } {}
  Function {Save4DDeformationImage()} {open return_type {virtual void}
  } {}
  Function {AbortDeformation()} {open return_type {virtual void}
  } {}
  Function {StartBSplineDeformation()} {open return_type {virtual void}
  } {}
  Function {ComputePathSelectedPoint()} {open return_type {virtual void}
  } {}
  Function {StartFEMDeformation()} {open return_type {virtual void}
  } {}
  Function {ComputePathSelectedVolume()} {open return_type {virtual void}
  } {}
  Function {LoadDicomSeries()} {open return_type {virtual void}
  } {}
  Function {ViewVolume()} {open return_type {virtual void}
  } {}
  Function {Save4DSegmentedImage()} {open return_type {virtual void}
  } {}
  Function {SetInteractor(int i)} {open return_type {virtual void}
  } {}
  Function {ViewSlice()} {open return_type {virtual void}
  } {}
  Function {ManualSegmentationStart()} {open return_type {virtual void}
  } {}
  Function {RasterizePolygon()} {open return_type {virtual void}
  } {}
  Function {ManualSegmentationStop()} {open return_type {virtual void}
  } {}
  Function {Save3DSegmentedImage()} {open return_type {virtual void}
  } {}
  decl {Fl_Text_Buffer *buff;} {public
  }
} 
