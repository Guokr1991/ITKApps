# data file for the Fltk User Interface Designer (fluid)
version 1.0011 
header_name {.h} 
code_name {.cxx}
class VDSegGrayUI {open : { private VDSegGrayRun }
} {
  Function {VDSegGrayUI()} {open
  } {
    Fl_Window panel {
      label {VD Segmentation (Gray)} open
      private xywh {365 23 316 645}
      code0 {\#include "VDSegGrayRun.h"} visible
    } {
      Fl_Button {} {
        label {Read Raw Image}
        callback {if(this->LoadImage()){
  viewslice->activate();
  selectprior->activate();
  loadpriorbutton->activate();
  if(m_Pages>1){
    viewslice->maximum(m_Pages-1);
    m_DisplaySlice=(int)(m_Pages/2);
    viewslice->value(m_DisplaySlice);
  }
  m_Viewer->sliceNum(m_DisplaySlice);
  m_Viewer->update();
}}
        private xywh {100 25 115 30} align 20 hotspot
      }
      Fl_Light_Button samplebutton {
        label Sampling
        callback {if(! samplebutton->value()){
this->ClearClicked();
statbutton->activate();
}}
        private xywh {190 120 80 30} when 1 deactivate
      }
      Fl_Value_Input SampleWinSize {
        label {With Window Size: }
        private xywh {280 155 25 25} when 8 value 5 deactivate
      }
      Fl_Value_Input InputMean {
        label {Mean:}
        private xywh {200 230 90 25} when 8 deactivate
      }
      Fl_Value_Input InputSTD {
        label {STD:}
        private xywh {200 265 90 25} deactivate
      }
      Fl_Button statbutton {
        label {Compute Stats.}
        callback {m_SampleRegion=SampleWinSize->value();
this->ComputeStats();
InputMean->value(m_Mean);
InputSTD->value(m_STD);
segbutton->activate();}
        private xywh {180 190 105 30} deactivate
      }
      Fl_Button segbutton {
        label {VD Segment}
        callback {m_Mean=InputMean->value();
m_STD=InputSTD->value();
m_MeanRatio=InputMeanRatio->value();
m_STDRatio=InputSTDRatio->value();
m_InitSeeds=initseedsinput->value();
m_MinRegion=minregion->value();
m_OutputBnd=outoption->value();
this->GenerateData();
savebutton->activate();}
        private xywh {90 535 130 35} deactivate
      }
      Fl_Button savebutton {
        label Save
        callback {this->Save();}
        private xywh {115 590 85 30} deactivate
      }
      Fl_Value_Slider viewslice {
        callback {m_DisplaySlice=(int)(viewslice->value());
m_Viewer->sliceNum(m_DisplaySlice);
m_Viewer->update();
if(m_ViewerResult){
m_ViewerResult->sliceNum(m_DisplaySlice);
m_ViewerResult->update();
}} selected
        private xywh {20 70 285 25} type Horizontal step 1 deactivate
      }
      Fl_Check_Button selectprior {
        label {Use A Prior}
        callback {if (selectprior->value()){
  loadpriorbutton->activate();
  samplebutton->deactivate();
  SampleWinSize->deactivate();
  statbutton->deactivate();
  InputMean->deactivate();
  InputSTD->deactivate();
  m_UsePrior=1;
}
else{
  loadpriorbutton->deactivate();
  samplebutton->activate();
  SampleWinSize->activate();
  statbutton->activate();
  InputMean->activate();
  InputSTD->activate();
  m_UsePrior=0;
}}
        private xywh {20 120 25 25} down_box DOWN_BOX value 1 deactivate
      }
      Fl_Button loadpriorbutton {
        label {Load A Prior}
        callback {if(this->LoadPrior()){
  segbutton->activate();
}}
        private xywh {20 150 100 30} deactivate
      }
      Fl_Value_Input InputMeanRatio {
        label {Mean Tolerence Ratio}
        private xywh {205 320 60 25} when 8 value 0.25
      }
      Fl_Value_Input InputSTDRatio {
        label {STD Tolerence Ratio:}
        private xywh {205 355 60 25} value 2.5
      }
      Fl_Value_Input initseedsinput {
        label {Initial Number of Seeds}
        private xywh {205 390 60 25} when 8 value 200
      }
      Fl_Value_Input minregion {
        label {Size of Minimum Region}
        private xywh {205 425 60 25} when 8 value 10
      }
      Fl_Check_Button outoption {
        label {Output Boundary}
        private xywh {95 465 25 25} down_box DOWN_BOX
      }
    }
  }
  Function {~VDSegGrayUI()} {open
  } {
    code {} {}
  }
  Function {Show(void)} {open return_type {virtual void}
  } {
    code {panel->show();} {}
  }
} 
