# data file for the Fltk User Interface Designer (fluid)
version 1.0011
header_name {.h} 
code_name {.cxx}
class FuzzySegGrayUI {open : { private FuzzySegGrayRun }
} {
  Function {FuzzySegGrayUI()} {open
  } {
    Fl_Window panel {
      label {Fuzzy Segmentation (Gray)} open
      private xywh {372 30 301 670}
      code0 {\#include "FuzzySegGrayRun.h"} visible
    } {
      Fl_Button {} {
        label {Read Raw Image}
        callback {if(this->LoadImage()){
  samplebutton->activate();
  viewslice->activate();
  if(m_Pages>1){
    viewslice->maximum(m_Pages-1);
    m_DisplaySlice=(int)(m_Pages/2);
    viewslice->value(m_DisplaySlice);
  }
  m_Viewer->sliceNum(m_DisplaySlice);
  m_Viewer->update();
}}
        private xywh {90 15 115 30} align 20 hotspot
      }
      Fl_Light_Button samplebutton {
        label Sampling
        callback {this->ClearClicked();
statbutton->activate();}
        private xywh {105 115 80 30} when 1 deactivate
      }
      Fl_Value_Input SampleWinSize {
        label {With Window Size: }
        private xywh {195 150 25 25} when 8 value 5
      }
      Fl_Value_Input InputMean {
        label {Mean:}
        private xywh {115 245 90 25} when 8
      }
      Fl_Value_Input InputVar {
        label {Variance:}
        private xywh {115 280 90 25}
      }
      Fl_Light_Button seedbutton {
        label {Pick Seed}
        callback {this->PickSeed();
segbutton->activate();}
        private xywh {100 345 90 30} when 1 deactivate
      }
      Fl_Slider ThresholdSlider {
        callback {m_Threshold=ThresholdSlider->value();
ThresholdInputer->value(m_Threshold);
m_Segmenter->UpdateThreshold(m_Threshold);
this->ShowResult();}
        private xywh {90 515 130 20} type Horizontal color 48 selection_color 1 when 4 value 0.5 deactivate
      }
      Fl_Value_Input ThresholdInputer {
        label {Threshold:}
        callback {m_Threshold=ThresholdInputer->value();
if (m_Threshold>1) m_Threshold=1;
if (m_Threshold<0) m_Threshold=0;
ThresholdInputer->value(m_Threshold);
ThresholdSlider->value(m_Threshold);
m_Segmenter->UpdateThreshold(m_Threshold);
this->ShowResult();}
        private xywh {140 485 70 25} when 8 step 0.001 value 0.5 deactivate
      }
      Fl_Light_Button showbutton {
        label {Show Scene}
        callback {m_AskScene=!m_AskScene;
ShowResult();
m_ViewerResult->sliceNum((int)(viewslice->value()));
m_ViewerResult->update();}
        private xywh {95 555 105 30} when 1 deactivate
      }
      Fl_Button statbutton {
        label {Compute Stats.}
        callback {m_SampleRegion=SampleWinSize->value();
this->ComputeStats();
InputMean->value(m_Mean);
InputVar->value(m_Variance);
seedbutton->activate();}
        private xywh {95 205 105 30} deactivate
      }
      Fl_Button segbutton {
        label {Fuzzy Segment}
        callback {m_Mean=InputMean->value();
m_Variance=InputVar->value();
this->GenerateData();
showbutton->activate();
savebutton->activate();
ThresholdSlider->activate();
ThresholdInputer->activate();} selected
        private xywh {85 410 130 35} deactivate
      }
      Fl_Button savebutton {
        label Save
        callback {this->Save();}
        xywh {105 615 85 30} deactivate
      }
      Fl_Value_Slider viewslice {
        callback {m_DisplaySlice=(int)(viewslice->value());
m_Viewer->sliceNum(m_DisplaySlice);
m_Viewer->update();
if(m_ViewerResult){
m_ViewerResult->sliceNum(m_DisplaySlice);
m_ViewerResult->update();
}}
        private xywh {30 65 255 25} type Horizontal step 1 deactivate
      }
    }
  }
  Function {~FuzzySegGrayUI()} {open
  } {}
  Function {Show(void)} {open return_type {virtual void}
  } {
    code {panel->show();} {}
  }
} 
