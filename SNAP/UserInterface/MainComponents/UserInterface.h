// generated by Fast Light User Interface Designer (fluid) version 1.0104

#ifndef UserInterface_h
#define UserInterface_h
#include <FL/Fl.H>
#include <stdio.h>
#include <string.h>
#include <Fl/fl_ask.h>
#include <Fl/fl_file_chooser.h>
#include <FL/Fl_Window.H>
#include "UserInterfaceBase.h"
#include <FL/Fl_Group.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Wizard.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Browser.H>
#include "IRISSliceWindow.h"
#include <FL/Fl_Scrollbar.H>
#include "Window3D.h"
#include "SNAPSliceWindow.h"
#include <FL/Fl_Input.H>
#include "IRISTypes.h"
#include <FL/Fl_Color_Chooser.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Clock.H>
#include "Credits.h"
#include <FL/Fl_Return_Button.H>
#include <FL/Fl_Help_View.H>

class UserInterface : public UserInterfaceBase {
public:
  int m_FileLoaded;
  int m_SegmentationLoaded;
  int m_ColorMap[256];
  Vector3i fileRAI;
  Vector3i intRAI;
  Vector3i labelRAI;
  Vector3i preprocRAI;
  UserInterface();
  Fl_Window *m_WinMain;
  Fl_Group *Controls;
  Fl_Menu_Bar *m_MenubarMain;
  static Fl_Menu_Item menu_m_MenubarMain[];
private:
  inline void cb_Greyscale_i(Fl_Menu_*, void*);
  static void cb_Greyscale(Fl_Menu_*, void*);
  inline void cb_Segmentation_i(Fl_Menu_*, void*);
  static void cb_Segmentation(Fl_Menu_*, void*);
  inline void cb_Label_i(Fl_Menu_*, void*);
  static void cb_Label(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *m_MenuLoadPreprocessed;
private:
  inline void cb_m_MenuLoadPreprocessed_i(Fl_Menu_*, void*);
  static void cb_m_MenuLoadPreprocessed(Fl_Menu_*, void*);
  inline void cb_Segmentation1_i(Fl_Menu_*, void*);
  static void cb_Segmentation1(Fl_Menu_*, void*);
  inline void cb_Label1_i(Fl_Menu_*, void*);
  static void cb_Label1(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *m_MenuSavePreprocessed;
private:
  inline void cb_m_MenuSavePreprocessed_i(Fl_Menu_*, void*);
  static void cb_m_MenuSavePreprocessed(Fl_Menu_*, void*);
  inline void cb_Print_i(Fl_Menu_*, void*);
  static void cb_Print(Fl_Menu_*, void*);
  inline void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
  inline void cb_Intensity_i(Fl_Menu_*, void*);
  static void cb_Intensity(Fl_Menu_*, void*);
  inline void cb_Rendering_i(Fl_Menu_*, void*);
  static void cb_Rendering(Fl_Menu_*, void*);
  inline void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
public:
  Fl_Wizard *m_WizControlPane;
  Fl_Group *m_GrpToolbarPage;
  Fl_Group *m_GrpInteractionModes;
  Fl_Button *m_BtnCrosshairsMode;
private:
  inline void cb_m_BtnCrosshairsMode_i(Fl_Button*, void*);
  static void cb_m_BtnCrosshairsMode(Fl_Button*, void*);
public:
  Fl_Button *m_BtnNavigationMode;
private:
  inline void cb_m_BtnNavigationMode_i(Fl_Button*, void*);
  static void cb_m_BtnNavigationMode(Fl_Button*, void*);
  inline void cb__i(Fl_Button*, void*);
  static void cb_(Fl_Button*, void*);
  inline void cb_1_i(Fl_Button*, void*);
  static void cb_1(Fl_Button*, void*);
  inline void cb_SnAP_i(Fl_Button*, void*);
  static void cb_SnAP(Fl_Button*, void*);
  inline void cb_edit_i(Fl_Button*, void*);
  static void cb_edit(Fl_Button*, void*);
public:
  Fl_Choice *m_InDrawingColor;
private:
  inline void cb_m_InDrawingColor_i(Fl_Choice*, void*);
  static void cb_m_InDrawingColor(Fl_Choice*, void*);
public:
  Fl_Group *m_GrpCurrentColor;
  Fl_Check_Button *m_InUseGaussianSmoothing;
private:
  inline void cb_m_InUseGaussianSmoothing_i(Fl_Check_Button*, void*);
  static void cb_m_InUseGaussianSmoothing(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *m_InUseMeshSmoothing;
private:
  inline void cb_m_InUseMeshSmoothing_i(Fl_Check_Button*, void*);
  static void cb_m_InUseMeshSmoothing(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *m_InUseDecimate;
private:
  inline void cb_m_InUseDecimate_i(Fl_Check_Button*, void*);
  static void cb_m_InUseDecimate(Fl_Check_Button*, void*);
public:
  Fl_Value_Slider *m_InIRISLabelOpacity;
private:
  inline void cb_m_InIRISLabelOpacity_i(Fl_Value_Slider*, void*);
  static void cb_m_InIRISLabelOpacity(Fl_Value_Slider*, void*);
public:
  Fl_Wizard *m_TabsToolOptions;
  Fl_Group *m_GrpToolOptionCrosshairs;
  Fl_Output *m_OutGreyProbe;
  Fl_Output *m_OutLabelProbe;
  Fl_Group *m_GrpToolOptionZoomPan;
  Fl_Group *m_GrpToolOptionPolygon;
  Fl_Group *m_GrpDrawOverColor;
  Fl_Choice *m_InDrawOverColor;
private:
  inline void cb_m_InDrawOverColor_i(Fl_Choice*, void*);
  static void cb_m_InDrawOverColor(Fl_Choice*, void*);
  inline void cb_Visible_i(Fl_Round_Button*, void*);
  static void cb_Visible(Fl_Round_Button*, void*);
  inline void cb_All_i(Fl_Round_Button*, void*);
  static void cb_All(Fl_Round_Button*, void*);
  inline void cb_Label2_i(Fl_Round_Button*, void*);
  static void cb_Label2(Fl_Round_Button*, void*);
public:
  Fl_Group *m_OutDrawOverColor;
private:
  inline void cb_Invert_i(Fl_Check_Button*, void*);
  static void cb_Invert(Fl_Check_Button*, void*);
public:
  Fl_Group *m_GrpToolOptionPaintCan;
  Fl_Group *m_GrpToolOptionSnAP;
  Fl_Button *m_BtnStartSnake;
private:
  inline void cb_m_BtnStartSnake_i(Fl_Button*, void*);
  static void cb_m_BtnStartSnake(Fl_Button*, void*);
public:
  Fl_Button *m_BtnResetROI;
private:
  inline void cb_m_BtnResetROI_i(Fl_Button*, void*);
  static void cb_m_BtnResetROI(Fl_Button*, void*);
public:
  Fl_Group *m_GrpWelcomePage;
private:
  inline void cb_Launch_i(Fl_Button*, void*);
  static void cb_Launch(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSNAPPage;
  Fl_Button *m_BtnSNAPCrosshairs;
private:
  inline void cb_m_BtnSNAPCrosshairs_i(Fl_Button*, void*);
  static void cb_m_BtnSNAPCrosshairs(Fl_Button*, void*);
public:
  Fl_Button *m_BtnSNAPNavigation;
private:
  inline void cb_m_BtnSNAPNavigation_i(Fl_Button*, void*);
  static void cb_m_BtnSNAPNavigation(Fl_Button*, void*);
public:
  Fl_Output *m_OutSNAPProbe;
  Fl_Output *m_OutSNAPLabelProbe;
  Fl_Group *m_GrpSNAPCurrentColor;
  Fl_Button *m_BtnSNAPStepPreprocess;
private:
  inline void cb_m_BtnSNAPStepPreprocess_i(Fl_Button*, void*);
  static void cb_m_BtnSNAPStepPreprocess(Fl_Button*, void*);
public:
  Fl_Button *m_BtnSNAPStepInitialize;
private:
  inline void cb_m_BtnSNAPStepInitialize_i(Fl_Button*, void*);
  static void cb_m_BtnSNAPStepInitialize(Fl_Button*, void*);
public:
  Fl_Button *m_BtnSNAPStepSegment;
private:
  inline void cb_m_BtnSNAPStepSegment_i(Fl_Button*, void*);
  static void cb_m_BtnSNAPStepSegment(Fl_Button*, void*);
public:
  Fl_Wizard *m_WizSegmentationPipeline;
  Fl_Group *m_GrpSNAPStepPreprocess;
  Fl_Button *m_BtnPreprocess;
private:
  inline void cb_m_BtnPreprocess_i(Fl_Button*, void*);
  static void cb_m_BtnPreprocess(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSnakeChoiceRadio;
  Fl_Round_Button *m_RadSnakeInOut;
private:
  inline void cb_m_RadSnakeInOut_i(Fl_Round_Button*, void*);
  static void cb_m_RadSnakeInOut(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_RadSnakeEdge;
private:
  inline void cb_m_RadSnakeEdge_i(Fl_Round_Button*, void*);
  static void cb_m_RadSnakeEdge(Fl_Round_Button*, void*);
public:
  Fl_Group *m_GrpSNAPStepInitialize;
  Fl_Button *m_BtnAddBubble;
private:
  inline void cb_m_BtnAddBubble_i(Fl_Button*, void*);
  static void cb_m_BtnAddBubble(Fl_Button*, void*);
public:
  Fl_Button *m_BtnRemoveBubble;
private:
  inline void cb_m_BtnRemoveBubble_i(Fl_Button*, void*);
  static void cb_m_BtnRemoveBubble(Fl_Button*, void*);
public:
  Fl_Value_Slider *m_InBubbleRadius;
private:
  inline void cb_m_InBubbleRadius_i(Fl_Value_Slider*, void*);
  static void cb_m_InBubbleRadius(Fl_Value_Slider*, void*);
public:
  Fl_Browser *m_BrsActiveBubbles;
private:
  inline void cb_m_BrsActiveBubbles_i(Fl_Browser*, void*);
  static void cb_m_BrsActiveBubbles(Fl_Browser*, void*);
public:
  Fl_Button *m_BtnAcceptInitialization;
private:
  inline void cb_m_BtnAcceptInitialization_i(Fl_Button*, void*);
  static void cb_m_BtnAcceptInitialization(Fl_Button*, void*);
public:
  Fl_Button *m_BtnRestartInitialization;
private:
  inline void cb_m_BtnRestartInitialization_i(Fl_Button*, void*);
  static void cb_m_BtnRestartInitialization(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSNAPStepSegment;
  Fl_Output *m_OutCurrentIteration;
  Fl_Button *m_BtnSnakeParameters;
private:
  inline void cb_m_BtnSnakeParameters_i(Fl_Button*, void*);
  static void cb_m_BtnSnakeParameters(Fl_Button*, void*);
public:
  Fl_Choice *m_InStepSize;
private:
  inline void cb_m_InStepSize_i(Fl_Choice*, void*);
  static void cb_m_InStepSize(Fl_Choice*, void*);
public:
  Fl_Button *m_BtnAcceptSegmentation;
private:
  inline void cb_m_BtnAcceptSegmentation_i(Fl_Button*, void*);
  static void cb_m_BtnAcceptSegmentation(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSnakeControl;
  Fl_Button *m_BtnSnakeRewind;
private:
  inline void cb_m_BtnSnakeRewind_i(Fl_Button*, void*);
  static void cb_m_BtnSnakeRewind(Fl_Button*, void*);
public:
  Fl_Button *m_BtnSnakePlay;
private:
  inline void cb_m_BtnSnakePlay_i(Fl_Button*, void*);
  static void cb_m_BtnSnakePlay(Fl_Button*, void*);
public:
  Fl_Button *m_BtnSnakeStop;
private:
  inline void cb_m_BtnSnakeStop_i(Fl_Button*, void*);
  static void cb_m_BtnSnakeStop(Fl_Button*, void*);
public:
  Fl_Button *m_BtnSnakeStep;
private:
  inline void cb_m_BtnSnakeStep_i(Fl_Button*, void*);
  static void cb_m_BtnSnakeStep(Fl_Button*, void*);
public:
  Fl_Group *m_GrpImageOptions;
  Fl_Round_Button *m_RadioSNAPViewOriginal;
private:
  inline void cb_m_RadioSNAPViewOriginal_i(Fl_Round_Button*, void*);
  static void cb_m_RadioSNAPViewOriginal(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_RadioSNAPViewPreprocessed;
private:
  inline void cb_m_RadioSNAPViewPreprocessed_i(Fl_Round_Button*, void*);
  static void cb_m_RadioSNAPViewPreprocessed(Fl_Round_Button*, void*);
public:
  Fl_Value_Slider *m_InSNAPLabelOpacity;
private:
  inline void cb_m_InSNAPLabelOpacity_i(Fl_Value_Slider*, void*);
  static void cb_m_InSNAPLabelOpacity(Fl_Value_Slider*, void*);
public:
  Fl_Button *m_BtnCancelSegmentation;
private:
  inline void cb_m_BtnCancelSegmentation_i(Fl_Button*, void*);
  static void cb_m_BtnCancelSegmentation(Fl_Button*, void*);
public:
  Fl_Output *m_OutMessage;
  Fl_Wizard *m_WizWindows;
  Fl_Group *m_GrpIRISWindows;
  Fl_Group *m_GrpIRISAxial;
private:
  inline void cb_m_InIRISSliceSlider_i(Fl_Scrollbar*, void*);
  static void cb_m_InIRISSliceSlider(Fl_Scrollbar*, void*);
  inline void cb_Accept_button_i(Fl_Button*, void*);
  static void cb_Accept_button(Fl_Button*, void*);
  inline void cb_m_BtnPaste_i(Fl_Button*, void*);
  static void cb_m_BtnPaste(Fl_Button*, void*);
  inline void cb_reset_i(Fl_Button*, void*);
  static void cb_reset(Fl_Button*, void*);
public:
  Fl_Group *m_GrpIRISSagittal;
private:
  inline void cb_m_InIRISSliceSlider1_i(Fl_Scrollbar*, void*);
  static void cb_m_InIRISSliceSlider1(Fl_Scrollbar*, void*);
  inline void cb_Accept_button1_i(Fl_Button*, void*);
  static void cb_Accept_button1(Fl_Button*, void*);
  inline void cb_m_BtnPaste1_i(Fl_Button*, void*);
  static void cb_m_BtnPaste1(Fl_Button*, void*);
  inline void cb_reset1_i(Fl_Button*, void*);
  static void cb_reset1(Fl_Button*, void*);
public:
  Fl_Group *m_GrpIRISCoronal;
  Fl_Scrollbar *m_InIRISSliceSlider[3];
private:
  inline void cb_m_InIRISSliceSlider2_i(Fl_Scrollbar*, void*);
  static void cb_m_InIRISSliceSlider2(Fl_Scrollbar*, void*);
public:
  Fl_Button *Accept_button[3];
private:
  inline void cb_Accept_button2_i(Fl_Button*, void*);
  static void cb_Accept_button2(Fl_Button*, void*);
public:
  Fl_Button *m_BtnPaste[3];
private:
  inline void cb_m_BtnPaste2_i(Fl_Button*, void*);
  static void cb_m_BtnPaste2(Fl_Button*, void*);
  inline void cb_reset2_i(Fl_Button*, void*);
  static void cb_reset2(Fl_Button*, void*);
public:
  Fl_Output *Position[3];
  IRISSliceWindow *Win2D[3];
  Fl_Group *m_GrpIRISView3D;
  Window3D *m_IRISWindow3D;
  Fl_Button *m_BtnMeshUpdate;
private:
  inline void cb_m_BtnMeshUpdate_i(Fl_Button*, void*);
  static void cb_m_BtnMeshUpdate(Fl_Button*, void*);
public:
  Fl_Button *m_BtnAccept3D;
private:
  inline void cb_m_BtnAccept3D_i(Fl_Button*, void*);
  static void cb_m_BtnAccept3D(Fl_Button*, void*);
  inline void cb_reset3_i(Fl_Button*, void*);
  static void cb_reset3(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSNAPWindows;
  Fl_Group *m_GrpSNAPAxial;
private:
  inline void cb_m_InSNAPSliceSlider_i(Fl_Scrollbar*, void*);
  static void cb_m_InSNAPSliceSlider(Fl_Scrollbar*, void*);
  inline void cb_reset4_i(Fl_Button*, void*);
  static void cb_reset4(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSNAPSagittal;
private:
  inline void cb_m_InSNAPSliceSlider1_i(Fl_Scrollbar*, void*);
  static void cb_m_InSNAPSliceSlider1(Fl_Scrollbar*, void*);
  inline void cb_reset5_i(Fl_Button*, void*);
  static void cb_reset5(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSNAPCoronal;
  Fl_Scrollbar *m_InSNAPSliceSlider[3];
private:
  inline void cb_m_InSNAPSliceSlider2_i(Fl_Scrollbar*, void*);
  static void cb_m_InSNAPSliceSlider2(Fl_Scrollbar*, void*);
  inline void cb_reset6_i(Fl_Button*, void*);
  static void cb_reset6(Fl_Button*, void*);
public:
  Fl_Output *OnSNAPSliceSliderChange[3];
  SNAPSliceWindow *m_SNAPWindow2D[3];
  Fl_Group *m_GRPSNAPView3D;
  Window3D *m_SNAPWindow3D;
  Fl_Button *m_BtnSNAPMeshUpdate;
private:
  inline void cb_m_BtnSNAPMeshUpdate_i(Fl_Button*, void*);
  static void cb_m_BtnSNAPMeshUpdate(Fl_Button*, void*);
  inline void cb_reset7_i(Fl_Button*, void*);
  static void cb_reset7(Fl_Button*, void*);
public:
  Fl_Check_Button *m_ChkContinuousView3DUpdate;
private:
  inline void cb_m_ChkContinuousView3DUpdate_i(Fl_Check_Button*, void*);
  static void cb_m_ChkContinuousView3DUpdate(Fl_Check_Button*, void*);
public:
  Fl_Window *m_WinLoadLabel;
  Fl_Input *m_InLoadLabelFilename;
private:
  inline void cb_select_i(Fl_Button*, void*);
  static void cb_select(Fl_Button*, void*);
  inline void cb_Okay_i(Fl_Button*, void*);
  static void cb_Okay(Fl_Button*, void*);
  inline void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
public:
  Fl_Window *m_WinSaveLabel;
  Fl_Input *m_InSaveLabelFilename;
private:
  inline void cb_select1_i(Fl_Button*, void*);
  static void cb_select1(Fl_Button*, void*);
  inline void cb_Okay1_i(Fl_Button*, void*);
  static void cb_Okay1(Fl_Button*, void*);
  inline void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
public:
  Fl_Window *m_WinEditLabel;
  Fl_Color_Chooser *m_GrpEditLabelColorChooser;
  Fl_Value_Slider *m_InEditLabelAlpha;
  Fl_Input *m_InEditLabelName;
  Fl_Check_Button *m_InEditLabelVisibility;
  Fl_Check_Button *m_InEditLabelMesh;
  Fl_Round_Button *m_BtnEditLabelAdd;
  Fl_Round_Button *m_BtnEditLabelChange;
private:
  inline void cb_Okay2_i(Fl_Button*, void*);
  static void cb_Okay2(Fl_Button*, void*);
  inline void cb_Apply_i(Fl_Button*, void*);
  static void cb_Apply(Fl_Button*, void*);
  inline void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Window *m_WinRenderOptions;
private:
  inline void cb_on_i(Fl_Check_Button*, void*);
  static void cb_on(Fl_Check_Button*, void*);
  inline void cb_on1_i(Fl_Check_Button*, void*);
  static void cb_on1(Fl_Check_Button*, void*);
public:
  Fl_Value_Input *m_InRenderOptionsGaussianStandardDeviationX;
  Fl_Value_Input *m_InRenderOptionsGaussianStandardDeviationY;
  Fl_Value_Input *m_InRenderOptionsGaussianStandardDeviationZ;
  Fl_Value_Slider *m_InRenderOptionsGaussianError;
  Fl_Check_Button *m_InRenderOptionsDecimateTopology;
  Fl_Value_Slider *m_InRenderOptionsDecimateIterations;
  Fl_Value_Input *m_InRenderOptionsDecimateReductions;
  Fl_Value_Input *m_InRenderOptionsDecimateInitialError;
  Fl_Value_Input *m_InRenderOptionsDecimateErrorIncrement;
  Fl_Value_Input *m_InRenderOptionsDecimateAspectRatio;
  Fl_Value_Input *m_InRenderOptionsDecimateFeatureAngle;
  Fl_Check_Button *m_InRenderOptionsMeshSmoothFeatureEdge;
  Fl_Check_Button *m_InRenderOptionsMeshSmoothBoundarySmoothing;
  Fl_Value_Input *m_InRenderOptionsMeshSmoothFeatureAngle;
  Fl_Value_Input *m_InRenderOptionsMeshSmoothConvergence;
  Fl_Value_Input *m_InRenderOptionsMeshSmoothRelaxation;
  Fl_Value_Slider *m_InRenderOptionsMeshSmoothIterations;
private:
  inline void cb_Okay3_i(Fl_Button*, void*);
  static void cb_Okay3(Fl_Button*, void*);
  inline void cb_Cancel2_i(Fl_Button*, void*);
  static void cb_Cancel2(Fl_Button*, void*);
public:
  Fl_Window *m_WinAbout;
  Fl_Output *m_OutAboutCompiled;
  Fl_Output *m_OutAboutCredits;
private:
  inline void cb_close_i(Fl_Button*, void*);
  static void cb_close(Fl_Button*, void*);
public:
  Fl_Window *m_WinSnakeParameters;
  Fl_Return_Button *m_BtnSnakeParametersOk;
private:
  inline void cb_m_BtnSnakeParametersOk_i(Fl_Return_Button*, void*);
  static void cb_m_BtnSnakeParametersOk(Fl_Return_Button*, void*);
public:
  Fl_Button *m_BtnSnakeParametersClose;
private:
  inline void cb_m_BtnSnakeParametersClose_i(Fl_Button*, void*);
  static void cb_m_BtnSnakeParametersClose(Fl_Button*, void*);
public:
  Fl_Group *m_GrpSnakeParametersConstraints;
  Fl_Group *m_GrpSnakeParametersDefaults;
  Fl_Round_Button *m_BtnSnakeParametersUserDefined;
private:
  inline void cb_m_BtnSnakeParametersUserDefined_i(Fl_Round_Button*, void*);
  static void cb_m_BtnSnakeParametersUserDefined(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_BtnSnakeParametersSchlegel;
private:
  inline void cb_m_BtnSnakeParametersSchlegel_i(Fl_Round_Button*, void*);
  static void cb_m_BtnSnakeParametersSchlegel(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_BtnSnakeParametersTurello;
private:
  inline void cb_m_BtnSnakeParametersTurello_i(Fl_Round_Button*, void*);
  static void cb_m_BtnSnakeParametersTurello(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_BtnSnakeParametersSapiro;
private:
  inline void cb_m_BtnSnakeParametersSapiro_i(Fl_Round_Button*, void*);
  static void cb_m_BtnSnakeParametersSapiro(Fl_Round_Button*, void*);
public:
  Fl_Group *m_GrpSnakeParametersSliders;
  Fl_Value_Slider *m_InSnakeParametersGradientExponent;
  Fl_Value_Slider *m_InSnakeParametersSmoothingWeight;
  Fl_Value_Slider *m_InSnakeParametersMCFWeight;
  Fl_Value_Slider *m_InSnakeParametersSpeedExponent;
  Fl_Value_Slider *m_InSnakeParametersSmoothingExponent;
  Fl_Value_Slider *m_InSnakeParametersMCFExponent;
  Fl_Value_Slider *m_InSnakeParametersGradientWeight;
  Fl_Group *m_GrpSnakeParametersProperties;
  Fl_Value_Slider *m_InSnakeParametersTimeStep;
  Fl_Value_Slider *m_InSnakeParametersGround;
  Fl_Value_Slider *m_InSnakeParametersSpeed;
  Fl_Check_Button *m_InSnakeParametersParamsClamp;
private:
  inline void cb_m_InSnakeParametersParamsClamp_i(Fl_Check_Button*, void*);
  static void cb_m_InSnakeParametersParamsClamp(Fl_Check_Button*, void*);
public:
  Fl_Button *m_BtnSnakeParametersApply;
private:
  inline void cb_m_BtnSnakeParametersApply_i(Fl_Button*, void*);
  static void cb_m_BtnSnakeParametersApply(Fl_Button*, void*);
public:
  Fl_Window *m_WinHelp;
  Fl_Help_View *m_BrsHelp;
};
#endif
