/*=========================================================================

  Program:   Insight Segmentation & Registration Toolkit
  Module:    LevelSetImageWrapper.h
  Language:  C++
  Date:      $Date$
  Version:   $Revision$
  Copyright (c) 2003 Insight Consortium. All rights reserved.
  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.

     This software is distributed WITHOUT ANY WARRANTY; without even 
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     PURPOSE.  See the above copyright notices for more information.
=========================================================================*/
#ifndef __LevelSetImageWrapper_h_
#define __LevelSetImageWrapper_h_

#include "ImageWrapper.h"
#include "ColorLabel.h"
#include "IRISTypes.h"
#include "itkRGBAPixel.h"

namespace itk {  
  template<class TPixel,unsigned int VDimension> class Image;
  template<class TInput,class TOutput> class FunctionBase;
  template<class TImage> class ImageSource;
};

/**
 * \class LevelSetImageWrapper
 * \brief Image wraper for level set images in SNAP
 *
 * The slices generated by this wrapper are processed such that
 * the interior (negative) regions of the level set image are mapped
 * to an RGB value and the exterior regions are black.
 * 
 * \sa ImageWrapper, LevelSetImageWrapperImplementation
 */
class LevelSetImageWrapper : virtual public ImageWrapper<float> 
{
public:
  // Type of color slice returned by this class
  typedef itk::RGBAPixel<unsigned char> DisplayPixelType;
  typedef itk::Image<DisplayPixelType,2> DisplaySliceType;
  typedef itk::SmartPointer<DisplaySliceType> DisplaySlicePointer;
    
  /**
   * Set the color label used to paint the inside of the level set
   */
  virtual void SetColorLabel(const ColorLabel &label) = 0;

  /**
   * Get the display slice in a given direction.  To change the
   * display slice, call parent's MoveToSlice() method
   */
  virtual DisplaySlicePointer GetDisplaySlice(unsigned int dim) = 0;
};

#endif // __LevelSetImageWrapper_h_
